
STM32F4_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005170  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005340  08005340  00015340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053f0  080053f0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080053f0  080053f0  000153f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053f8  080053f8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f8  080053f8  000153f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e70  20000078  08005478  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012ee8  08005478  00022ee8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018617  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d5  00000000  00000000  000386bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0003b998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  0003cb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d9c  00000000  00000000  0003dbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001573a  00000000  00000000  0006198c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9e2a  00000000  00000000  000770c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150ef0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d40  00000000  00000000  00150f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005328 	.word	0x08005328

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005328 	.word	0x08005328

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fa5c 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f808 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f8a2 	bl	800070c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c8:	f000 f876 	bl	80006b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //should never return
  main_app();
 80005cc:	f004 f99c 	bl	8004908 <main_app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <main+0x18>
	...

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2234      	movs	r2, #52	; 0x34
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f004 fa78 	bl	8004ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <SystemClock_Config+0xdc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a2b      	ldr	r2, [pc, #172]	; (80006b0 <SystemClock_Config+0xdc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <SystemClock_Config+0xdc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SystemClock_Config+0xe0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <SystemClock_Config+0xe0>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <SystemClock_Config+0xe0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000638:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000648:	23b4      	movs	r3, #180	; 0xb4
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4618      	mov	r0, r3
 800065e:	f001 f845 	bl	80016ec <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000668:	f000 f8a4 	bl	80007b4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800066c:	f000 fcf0 	bl	8001050 <HAL_PWREx_EnableOverDrive>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000676:	f000 f89d 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000686:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	2105      	movs	r1, #5
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fd29 	bl	80010f0 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006a4:	f000 f886 	bl	80007b4 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	; 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART2_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f001 fd48 	bl	8002184 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f85b 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20012e08 	.word	0x20012e08
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_GPIO_Init+0x7c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_GPIO_Init+0x7c>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_GPIO_Init+0x7c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_GPIO_Init+0x7c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a10      	ldr	r2, [pc, #64]	; (8000788 <MX_GPIO_Init+0x7c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_GPIO_Init+0x7c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2120      	movs	r1, #32
 800075e:	480b      	ldr	r0, [pc, #44]	; (800078c <MX_GPIO_Init+0x80>)
 8000760:	f000 fc42 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000764:	2320      	movs	r3, #32
 8000766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0x80>)
 800077c:	f000 faa0 	bl	8000cc0 <HAL_GPIO_Init>

}
 8000780:	bf00      	nop
 8000782:	3720      	adds	r7, #32
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000

08000790 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d101      	bne.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007a2:	f000 f98b 	bl	8000abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40001000 	.word	0x40001000

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	e7fe      	b.n	80007bc <Error_Handler+0x8>
	...

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	4a0f      	ldr	r2, [pc, #60]	; (800080c <HAL_MspInit+0x4c>)
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d4:	6453      	str	r3, [r2, #68]	; 0x44
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <HAL_MspInit+0x4c>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <HAL_MspInit+0x4c>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_MspInit+0x4c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a19      	ldr	r2, [pc, #100]	; (8000894 <HAL_UART_MspInit+0x84>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d12b      	bne.n	800088a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <HAL_UART_MspInit+0x88>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a17      	ldr	r2, [pc, #92]	; (8000898 <HAL_UART_MspInit+0x88>)
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_UART_MspInit+0x88>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_UART_MspInit+0x88>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a10      	ldr	r2, [pc, #64]	; (8000898 <HAL_UART_MspInit+0x88>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <HAL_UART_MspInit+0x88>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800086a:	230c      	movs	r3, #12
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800087a:	2307      	movs	r3, #7
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <HAL_UART_MspInit+0x8c>)
 8000886:	f000 fa1b 	bl	8000cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	; 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40004400 	.word	0x40004400
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000

080008a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	; 0x30
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	2036      	movs	r0, #54	; 0x36
 80008b6:	f000 f9d9 	bl	8000c6c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008ba:	2036      	movs	r0, #54	; 0x36
 80008bc:	f000 f9f2 	bl	8000ca4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <HAL_InitTick+0xa4>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a1e      	ldr	r2, [pc, #120]	; (8000944 <HAL_InitTick+0xa4>)
 80008ca:	f043 0310 	orr.w	r3, r3, #16
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <HAL_InitTick+0xa4>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f003 0310 	and.w	r3, r3, #16
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008dc:	f107 0210 	add.w	r2, r7, #16
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4611      	mov	r1, r2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fd1c 	bl	8001324 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008ec:	f000 fcf2 	bl	80012d4 <HAL_RCC_GetPCLK1Freq>
 80008f0:	4603      	mov	r3, r0
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f8:	4a13      	ldr	r2, [pc, #76]	; (8000948 <HAL_InitTick+0xa8>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	0c9b      	lsrs	r3, r3, #18
 8000900:	3b01      	subs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_InitTick+0xac>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <HAL_InitTick+0xb0>)
 8000908:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_InitTick+0xac>)
 800090c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000910:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <HAL_InitTick+0xac>)
 8000914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000916:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_InitTick+0xac>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <HAL_InitTick+0xac>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000924:	4809      	ldr	r0, [pc, #36]	; (800094c <HAL_InitTick+0xac>)
 8000926:	f001 f97f 	bl	8001c28 <HAL_TIM_Base_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d104      	bne.n	800093a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000930:	4806      	ldr	r0, [pc, #24]	; (800094c <HAL_InitTick+0xac>)
 8000932:	f001 f9d3 	bl	8001cdc <HAL_TIM_Base_Start_IT>
 8000936:	4603      	mov	r3, r0
 8000938:	e000      	b.n	800093c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	3730      	adds	r7, #48	; 0x30
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	431bde83 	.word	0x431bde83
 800094c:	20012e4c 	.word	0x20012e4c
 8000950:	40001000 	.word	0x40001000

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <TIM6_DAC_IRQHandler+0x10>)
 8000986:	f001 fa19 	bl	8001dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20012e4c 	.word	0x20012e4c

08000994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800099c:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <_sbrk+0x5c>)
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <_sbrk+0x60>)
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <_sbrk+0x64>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <_sbrk+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d207      	bcs.n	80009d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c4:	f004 f850 	bl	8004a68 <__errno>
 80009c8:	4603      	mov	r3, r0
 80009ca:	220c      	movs	r2, #12
 80009cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	e009      	b.n	80009e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <_sbrk+0x64>)
 80009e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e6:	68fb      	ldr	r3, [r7, #12]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20020000 	.word	0x20020000
 80009f4:	00000400 	.word	0x00000400
 80009f8:	20000094 	.word	0x20000094
 80009fc:	20012ee8 	.word	0x20012ee8

08000a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2a:	490e      	ldr	r1, [pc, #56]	; (8000a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a40:	4c0b      	ldr	r4, [pc, #44]	; (8000a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a4e:	f7ff ffd7 	bl	8000a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f004 f80f 	bl	8004a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fdaf 	bl	80005b8 <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a68:	08005400 	.word	0x08005400
  ldr r2, =_sbss
 8000a6c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a70:	20012ee8 	.word	0x20012ee8

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f8d8 	bl	8000c56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f7ff fefa 	bl	80008a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fe88 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20012e94 	.word	0x20012e94

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20012e94 	.word	0x20012e94

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4907      	ldr	r1, [pc, #28]	; (8000b98 <__NVIC_EnableIRQ+0x38>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	; (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	; 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ff4c 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7e:	f7ff ff61 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000c82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	6978      	ldr	r0, [r7, #20]
 8000c8a:	f7ff ffb1 	bl	8000bf0 <NVIC_EncodePriority>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff80 	bl	8000b9c <__NVIC_SetPriority>
}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff54 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	e165      	b.n	8000fa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	f040 8154 	bne.w	8000fa2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d005      	beq.n	8000d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d130      	bne.n	8000d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	091b      	lsrs	r3, r3, #4
 8000d5e:	f003 0201 	and.w	r2, r3, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d017      	beq.n	8000db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d123      	bne.n	8000e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	69b9      	ldr	r1, [r7, #24]
 8000e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0203 	and.w	r2, r3, #3
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80ae 	beq.w	8000fa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b5d      	ldr	r3, [pc, #372]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a5c      	ldr	r2, [pc, #368]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b5a      	ldr	r3, [pc, #360]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e62:	4a58      	ldr	r2, [pc, #352]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4f      	ldr	r2, [pc, #316]	; (8000fc8 <HAL_GPIO_Init+0x308>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d025      	beq.n	8000eda <HAL_GPIO_Init+0x21a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4e      	ldr	r2, [pc, #312]	; (8000fcc <HAL_GPIO_Init+0x30c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d01f      	beq.n	8000ed6 <HAL_GPIO_Init+0x216>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4d      	ldr	r2, [pc, #308]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d019      	beq.n	8000ed2 <HAL_GPIO_Init+0x212>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4c      	ldr	r2, [pc, #304]	; (8000fd4 <HAL_GPIO_Init+0x314>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x20e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4b      	ldr	r2, [pc, #300]	; (8000fd8 <HAL_GPIO_Init+0x318>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00d      	beq.n	8000eca <HAL_GPIO_Init+0x20a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4a      	ldr	r2, [pc, #296]	; (8000fdc <HAL_GPIO_Init+0x31c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a49      	ldr	r2, [pc, #292]	; (8000fe0 <HAL_GPIO_Init+0x320>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_Init+0x202>
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	e00c      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	e00a      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	e008      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000eca:	2304      	movs	r3, #4
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000eda:	2300      	movs	r3, #0
 8000edc:	69fa      	ldr	r2, [r7, #28]
 8000ede:	f002 0203 	and.w	r2, r2, #3
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eec:	4935      	ldr	r1, [pc, #212]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000efa:	4b3a      	ldr	r3, [pc, #232]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f1e:	4a31      	ldr	r2, [pc, #196]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f24:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f48:	4a26      	ldr	r2, [pc, #152]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4e:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f9c:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	2b0f      	cmp	r3, #15
 8000fac:	f67f ae96 	bls.w	8000cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40013800 	.word	0x40013800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40021400 	.word	0x40021400
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	40013c00 	.word	0x40013c00

08000fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001004:	e003      	b.n	800100e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	041a      	lsls	r2, r3, #16
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	619a      	str	r2, [r3, #24]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800101a:	b480      	push	{r7}
 800101c:	b085      	sub	sp, #20
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800102c:	887a      	ldrh	r2, [r7, #2]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4013      	ands	r3, r2
 8001032:	041a      	lsls	r2, r3, #16
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43d9      	mvns	r1, r3
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	400b      	ands	r3, r1
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	619a      	str	r2, [r3, #24]
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001078:	2201      	movs	r2, #1
 800107a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800107c:	f7ff fd32 	bl	8000ae4 <HAL_GetTick>
 8001080:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001082:	e009      	b.n	8001098 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001084:	f7ff fd2e 	bl	8000ae4 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001092:	d901      	bls.n	8001098 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e01f      	b.n	80010d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a4:	d1ee      	bne.n	8001084 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ac:	f7ff fd1a 	bl	8000ae4 <HAL_GetTick>
 80010b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010b2:	e009      	b.n	80010c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010b4:	f7ff fd16 	bl	8000ae4 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010c2:	d901      	bls.n	80010c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e007      	b.n	80010d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010d4:	d1ee      	bne.n	80010b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800
 80010e4:	420e0040 	.word	0x420e0040
 80010e8:	40007000 	.word	0x40007000
 80010ec:	420e0044 	.word	0x420e0044

080010f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e0cc      	b.n	800129e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001104:	4b68      	ldr	r3, [pc, #416]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d90c      	bls.n	800112c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001112:	4b65      	ldr	r3, [pc, #404]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800111a:	4b63      	ldr	r3, [pc, #396]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	d001      	beq.n	800112c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e0b8      	b.n	800129e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d020      	beq.n	800117a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001144:	4b59      	ldr	r3, [pc, #356]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4a58      	ldr	r2, [pc, #352]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800114e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0308 	and.w	r3, r3, #8
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4a52      	ldr	r2, [pc, #328]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001168:	4b50      	ldr	r3, [pc, #320]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	494d      	ldr	r1, [pc, #308]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	4313      	orrs	r3, r2
 8001178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d044      	beq.n	8001210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d107      	bne.n	800119e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	4b47      	ldr	r3, [pc, #284]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d119      	bne.n	80011ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e07f      	b.n	800129e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d003      	beq.n	80011ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d107      	bne.n	80011be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ae:	4b3f      	ldr	r3, [pc, #252]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d109      	bne.n	80011ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e06f      	b.n	800129e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011be:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e067      	b.n	800129e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ce:	4b37      	ldr	r3, [pc, #220]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f023 0203 	bic.w	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	4934      	ldr	r1, [pc, #208]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011e0:	f7ff fc80 	bl	8000ae4 <HAL_GetTick>
 80011e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e6:	e00a      	b.n	80011fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e8:	f7ff fc7c 	bl	8000ae4 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e04f      	b.n	800129e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 020c 	and.w	r2, r3, #12
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	429a      	cmp	r2, r3
 800120e:	d1eb      	bne.n	80011e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001210:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d20c      	bcs.n	8001238 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121e:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e032      	b.n	800129e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d008      	beq.n	8001256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	4916      	ldr	r1, [pc, #88]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	4313      	orrs	r3, r2
 8001254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d009      	beq.n	8001276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	490e      	ldr	r1, [pc, #56]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001272:	4313      	orrs	r3, r2
 8001274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001276:	f000 f887 	bl	8001388 <HAL_RCC_GetSysClockFreq>
 800127a:	4602      	mov	r2, r0
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	490a      	ldr	r1, [pc, #40]	; (80012b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	5ccb      	ldrb	r3, [r1, r3]
 800128a:	fa22 f303 	lsr.w	r3, r2, r3
 800128e:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fb02 	bl	80008a0 <HAL_InitTick>

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023c00 	.word	0x40023c00
 80012ac:	40023800 	.word	0x40023800
 80012b0:	080053a4 	.word	0x080053a4
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000004 	.word	0x20000004

080012bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000000 	.word	0x20000000

080012d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012d8:	f7ff fff0 	bl	80012bc <HAL_RCC_GetHCLKFreq>
 80012dc:	4602      	mov	r2, r0
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	0a9b      	lsrs	r3, r3, #10
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	4903      	ldr	r1, [pc, #12]	; (80012f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012ea:	5ccb      	ldrb	r3, [r1, r3]
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	080053b4 	.word	0x080053b4

080012fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001300:	f7ff ffdc 	bl	80012bc <HAL_RCC_GetHCLKFreq>
 8001304:	4602      	mov	r2, r0
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	0b5b      	lsrs	r3, r3, #13
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	4903      	ldr	r1, [pc, #12]	; (8001320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001312:	5ccb      	ldrb	r3, [r1, r3]
 8001314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001318:	4618      	mov	r0, r3
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	080053b4 	.word	0x080053b4

08001324 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	220f      	movs	r2, #15
 8001332:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_RCC_GetClockConfig+0x5c>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 0203 	and.w	r2, r3, #3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_RCC_GetClockConfig+0x5c>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_RCC_GetClockConfig+0x5c>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_RCC_GetClockConfig+0x5c>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <HAL_RCC_GetClockConfig+0x60>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 020f 	and.w	r2, r3, #15
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	601a      	str	r2, [r3, #0]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40023c00 	.word	0x40023c00

08001388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800138c:	b088      	sub	sp, #32
 800138e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a4:	4bce      	ldr	r3, [pc, #824]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 030c 	and.w	r3, r3, #12
 80013ac:	2b0c      	cmp	r3, #12
 80013ae:	f200 818d 	bhi.w	80016cc <HAL_RCC_GetSysClockFreq+0x344>
 80013b2:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <HAL_RCC_GetSysClockFreq+0x30>)
 80013b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b8:	080013ed 	.word	0x080013ed
 80013bc:	080016cd 	.word	0x080016cd
 80013c0:	080016cd 	.word	0x080016cd
 80013c4:	080016cd 	.word	0x080016cd
 80013c8:	080013f3 	.word	0x080013f3
 80013cc:	080016cd 	.word	0x080016cd
 80013d0:	080016cd 	.word	0x080016cd
 80013d4:	080016cd 	.word	0x080016cd
 80013d8:	080013f9 	.word	0x080013f9
 80013dc:	080016cd 	.word	0x080016cd
 80013e0:	080016cd 	.word	0x080016cd
 80013e4:	080016cd 	.word	0x080016cd
 80013e8:	0800156d 	.word	0x0800156d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013ec:	4bbd      	ldr	r3, [pc, #756]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013ee:	61bb      	str	r3, [r7, #24]
       break;
 80013f0:	e16f      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013f2:	4bbd      	ldr	r3, [pc, #756]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x360>)
 80013f4:	61bb      	str	r3, [r7, #24]
      break;
 80013f6:	e16c      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013f8:	4bb9      	ldr	r3, [pc, #740]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001400:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001402:	4bb7      	ldr	r3, [pc, #732]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d053      	beq.n	80014b6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800140e:	4bb4      	ldr	r3, [pc, #720]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	099b      	lsrs	r3, r3, #6
 8001414:	461a      	mov	r2, r3
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800141e:	f04f 0100 	mov.w	r1, #0
 8001422:	ea02 0400 	and.w	r4, r2, r0
 8001426:	603c      	str	r4, [r7, #0]
 8001428:	400b      	ands	r3, r1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001430:	4620      	mov	r0, r4
 8001432:	4629      	mov	r1, r5
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	014b      	lsls	r3, r1, #5
 800143e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001442:	0142      	lsls	r2, r0, #5
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	4623      	mov	r3, r4
 800144a:	1ac0      	subs	r0, r0, r3
 800144c:	462b      	mov	r3, r5
 800144e:	eb61 0103 	sbc.w	r1, r1, r3
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	018b      	lsls	r3, r1, #6
 800145c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001460:	0182      	lsls	r2, r0, #6
 8001462:	1a12      	subs	r2, r2, r0
 8001464:	eb63 0301 	sbc.w	r3, r3, r1
 8001468:	f04f 0000 	mov.w	r0, #0
 800146c:	f04f 0100 	mov.w	r1, #0
 8001470:	00d9      	lsls	r1, r3, #3
 8001472:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001476:	00d0      	lsls	r0, r2, #3
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4621      	mov	r1, r4
 800147e:	1852      	adds	r2, r2, r1
 8001480:	4629      	mov	r1, r5
 8001482:	eb43 0101 	adc.w	r1, r3, r1
 8001486:	460b      	mov	r3, r1
 8001488:	f04f 0000 	mov.w	r0, #0
 800148c:	f04f 0100 	mov.w	r1, #0
 8001490:	0259      	lsls	r1, r3, #9
 8001492:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001496:	0250      	lsls	r0, r2, #9
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	461a      	mov	r2, r3
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	f7fe ff0a 	bl	80002c0 <__aeabi_uldivmod>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4613      	mov	r3, r2
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	e04c      	b.n	8001550 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014b6:	4b8a      	ldr	r3, [pc, #552]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	099b      	lsrs	r3, r3, #6
 80014bc:	461a      	mov	r2, r3
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80014c6:	f04f 0100 	mov.w	r1, #0
 80014ca:	ea02 0a00 	and.w	sl, r2, r0
 80014ce:	ea03 0b01 	and.w	fp, r3, r1
 80014d2:	4650      	mov	r0, sl
 80014d4:	4659      	mov	r1, fp
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	014b      	lsls	r3, r1, #5
 80014e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014e4:	0142      	lsls	r2, r0, #5
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	ebb0 000a 	subs.w	r0, r0, sl
 80014ee:	eb61 010b 	sbc.w	r1, r1, fp
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	018b      	lsls	r3, r1, #6
 80014fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001500:	0182      	lsls	r2, r0, #6
 8001502:	1a12      	subs	r2, r2, r0
 8001504:	eb63 0301 	sbc.w	r3, r3, r1
 8001508:	f04f 0000 	mov.w	r0, #0
 800150c:	f04f 0100 	mov.w	r1, #0
 8001510:	00d9      	lsls	r1, r3, #3
 8001512:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001516:	00d0      	lsls	r0, r2, #3
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	eb12 020a 	adds.w	r2, r2, sl
 8001520:	eb43 030b 	adc.w	r3, r3, fp
 8001524:	f04f 0000 	mov.w	r0, #0
 8001528:	f04f 0100 	mov.w	r1, #0
 800152c:	0299      	lsls	r1, r3, #10
 800152e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001532:	0290      	lsls	r0, r2, #10
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	461a      	mov	r2, r3
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	f7fe febc 	bl	80002c0 <__aeabi_uldivmod>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4613      	mov	r3, r2
 800154e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001550:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	0c1b      	lsrs	r3, r3, #16
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	3301      	adds	r3, #1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	fbb2 f3f3 	udiv	r3, r2, r3
 8001568:	61bb      	str	r3, [r7, #24]
      break;
 800156a:	e0b2      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800156c:	4b5c      	ldr	r3, [pc, #368]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001574:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001576:	4b5a      	ldr	r3, [pc, #360]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d04d      	beq.n	800161e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001582:	4b57      	ldr	r3, [pc, #348]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	099b      	lsrs	r3, r3, #6
 8001588:	461a      	mov	r2, r3
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001592:	f04f 0100 	mov.w	r1, #0
 8001596:	ea02 0800 	and.w	r8, r2, r0
 800159a:	ea03 0901 	and.w	r9, r3, r1
 800159e:	4640      	mov	r0, r8
 80015a0:	4649      	mov	r1, r9
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	014b      	lsls	r3, r1, #5
 80015ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015b0:	0142      	lsls	r2, r0, #5
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	ebb0 0008 	subs.w	r0, r0, r8
 80015ba:	eb61 0109 	sbc.w	r1, r1, r9
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	018b      	lsls	r3, r1, #6
 80015c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015cc:	0182      	lsls	r2, r0, #6
 80015ce:	1a12      	subs	r2, r2, r0
 80015d0:	eb63 0301 	sbc.w	r3, r3, r1
 80015d4:	f04f 0000 	mov.w	r0, #0
 80015d8:	f04f 0100 	mov.w	r1, #0
 80015dc:	00d9      	lsls	r1, r3, #3
 80015de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015e2:	00d0      	lsls	r0, r2, #3
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	eb12 0208 	adds.w	r2, r2, r8
 80015ec:	eb43 0309 	adc.w	r3, r3, r9
 80015f0:	f04f 0000 	mov.w	r0, #0
 80015f4:	f04f 0100 	mov.w	r1, #0
 80015f8:	0259      	lsls	r1, r3, #9
 80015fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80015fe:	0250      	lsls	r0, r2, #9
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	461a      	mov	r2, r3
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	f7fe fe56 	bl	80002c0 <__aeabi_uldivmod>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4613      	mov	r3, r2
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	e04a      	b.n	80016b4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800161e:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	099b      	lsrs	r3, r3, #6
 8001624:	461a      	mov	r2, r3
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800162e:	f04f 0100 	mov.w	r1, #0
 8001632:	ea02 0400 	and.w	r4, r2, r0
 8001636:	ea03 0501 	and.w	r5, r3, r1
 800163a:	4620      	mov	r0, r4
 800163c:	4629      	mov	r1, r5
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	014b      	lsls	r3, r1, #5
 8001648:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800164c:	0142      	lsls	r2, r0, #5
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	1b00      	subs	r0, r0, r4
 8001654:	eb61 0105 	sbc.w	r1, r1, r5
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	018b      	lsls	r3, r1, #6
 8001662:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001666:	0182      	lsls	r2, r0, #6
 8001668:	1a12      	subs	r2, r2, r0
 800166a:	eb63 0301 	sbc.w	r3, r3, r1
 800166e:	f04f 0000 	mov.w	r0, #0
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	00d9      	lsls	r1, r3, #3
 8001678:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800167c:	00d0      	lsls	r0, r2, #3
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	1912      	adds	r2, r2, r4
 8001684:	eb45 0303 	adc.w	r3, r5, r3
 8001688:	f04f 0000 	mov.w	r0, #0
 800168c:	f04f 0100 	mov.w	r1, #0
 8001690:	0299      	lsls	r1, r3, #10
 8001692:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001696:	0290      	lsls	r0, r2, #10
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	461a      	mov	r2, r3
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	f7fe fe0a 	bl	80002c0 <__aeabi_uldivmod>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4613      	mov	r3, r2
 80016b2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	0f1b      	lsrs	r3, r3, #28
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c8:	61bb      	str	r3, [r7, #24]
      break;
 80016ca:	e002      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80016ce:	61bb      	str	r3, [r7, #24]
      break;
 80016d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016d2:	69bb      	ldr	r3, [r7, #24]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	00f42400 	.word	0x00f42400
 80016e8:	007a1200 	.word	0x007a1200

080016ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e28d      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8083 	beq.w	8001812 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800170c:	4b94      	ldr	r3, [pc, #592]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b04      	cmp	r3, #4
 8001716:	d019      	beq.n	800174c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001718:	4b91      	ldr	r3, [pc, #580]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001720:	2b08      	cmp	r3, #8
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001724:	4b8e      	ldr	r3, [pc, #568]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001730:	d00c      	beq.n	800174c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001732:	4b8b      	ldr	r3, [pc, #556]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d112      	bne.n	8001764 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173e:	4b88      	ldr	r3, [pc, #544]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800174a:	d10b      	bne.n	8001764 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	4b84      	ldr	r3, [pc, #528]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d05b      	beq.n	8001810 <HAL_RCC_OscConfig+0x124>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d157      	bne.n	8001810 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e25a      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x90>
 800176e:	4b7c      	ldr	r3, [pc, #496]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a7b      	ldr	r2, [pc, #492]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e01d      	b.n	80017b8 <HAL_RCC_OscConfig+0xcc>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0xb4>
 8001786:	4b76      	ldr	r3, [pc, #472]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a75      	ldr	r2, [pc, #468]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b73      	ldr	r3, [pc, #460]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a72      	ldr	r2, [pc, #456]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0xcc>
 80017a0:	4b6f      	ldr	r3, [pc, #444]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a6e      	ldr	r2, [pc, #440]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b6c      	ldr	r3, [pc, #432]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a6b      	ldr	r2, [pc, #428]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d013      	beq.n	80017e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff f990 	bl	8000ae4 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff f98c 	bl	8000ae4 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e21f      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b61      	ldr	r3, [pc, #388]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0xdc>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff f97c 	bl	8000ae4 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff f978 	bl	8000ae4 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e20b      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	4b57      	ldr	r3, [pc, #348]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x104>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d06f      	beq.n	80018fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800181e:	4b50      	ldr	r3, [pc, #320]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b00      	cmp	r3, #0
 8001828:	d017      	beq.n	800185a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800182a:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001832:	2b08      	cmp	r3, #8
 8001834:	d105      	bne.n	8001842 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001842:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800184a:	2b0c      	cmp	r3, #12
 800184c:	d11c      	bne.n	8001888 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184e:	4b44      	ldr	r3, [pc, #272]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d116      	bne.n	8001888 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	4b41      	ldr	r3, [pc, #260]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x186>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e1d3      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4937      	ldr	r1, [pc, #220]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	e03a      	b.n	80018fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	4b34      	ldr	r3, [pc, #208]	; (8001964 <HAL_RCC_OscConfig+0x278>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff f925 	bl	8000ae4 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff f921 	bl	8000ae4 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e1b4      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4925      	ldr	r1, [pc, #148]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
 80018d0:	e015      	b.n	80018fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_RCC_OscConfig+0x278>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff f904 	bl	8000ae4 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff f900 	bl	8000ae4 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e193      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d036      	beq.n	8001978 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d016      	beq.n	8001940 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_RCC_OscConfig+0x27c>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff f8e4 	bl	8000ae4 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001920:	f7ff f8e0 	bl	8000ae4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e173      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x234>
 800193e:	e01b      	b.n	8001978 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_RCC_OscConfig+0x27c>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff f8cd 	bl	8000ae4 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	e00e      	b.n	800196c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff f8c9 	bl	8000ae4 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d907      	bls.n	800196c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e15c      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
 8001960:	40023800 	.word	0x40023800
 8001964:	42470000 	.word	0x42470000
 8001968:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	4b8a      	ldr	r3, [pc, #552]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 800196e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ea      	bne.n	800194e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8097 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198a:	4b83      	ldr	r3, [pc, #524]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10f      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b7f      	ldr	r3, [pc, #508]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a7e      	ldr	r2, [pc, #504]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b7c      	ldr	r3, [pc, #496]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b2:	2301      	movs	r3, #1
 80019b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b6:	4b79      	ldr	r3, [pc, #484]	; (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d118      	bne.n	80019f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c2:	4b76      	ldr	r3, [pc, #472]	; (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a75      	ldr	r2, [pc, #468]	; (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ce:	f7ff f889 	bl	8000ae4 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7ff f885 	bl	8000ae4 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e118      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	4b6c      	ldr	r3, [pc, #432]	; (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x31e>
 80019fc:	4b66      	ldr	r3, [pc, #408]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a00:	4a65      	ldr	r2, [pc, #404]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6713      	str	r3, [r2, #112]	; 0x70
 8001a08:	e01c      	b.n	8001a44 <HAL_RCC_OscConfig+0x358>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b05      	cmp	r3, #5
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x340>
 8001a12:	4b61      	ldr	r3, [pc, #388]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a16:	4a60      	ldr	r2, [pc, #384]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1e:	4b5e      	ldr	r3, [pc, #376]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a22:	4a5d      	ldr	r2, [pc, #372]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0x358>
 8001a2c:	4b5a      	ldr	r3, [pc, #360]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4a59      	ldr	r2, [pc, #356]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	6713      	str	r3, [r2, #112]	; 0x70
 8001a38:	4b57      	ldr	r3, [pc, #348]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3c:	4a56      	ldr	r2, [pc, #344]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a3e:	f023 0304 	bic.w	r3, r3, #4
 8001a42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d015      	beq.n	8001a78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff f84a 	bl	8000ae4 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f7ff f846 	bl	8000ae4 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e0d7      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6a:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0ee      	beq.n	8001a54 <HAL_RCC_OscConfig+0x368>
 8001a76:	e014      	b.n	8001aa2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff f834 	bl	8000ae4 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7ff f830 	bl	8000ae4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e0c1      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a96:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1ee      	bne.n	8001a80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa2:	7dfb      	ldrb	r3, [r7, #23]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d105      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	4a3a      	ldr	r2, [pc, #232]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80ad 	beq.w	8001c18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d060      	beq.n	8001b8c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d145      	bne.n	8001b5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <HAL_RCC_OscConfig+0x4b4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f804 	bl	8000ae4 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f800 	bl	8000ae4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e093      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	019b      	lsls	r3, r3, #6
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	085b      	lsrs	r3, r3, #1
 8001b16:	3b01      	subs	r3, #1
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	061b      	lsls	r3, r3, #24
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	071b      	lsls	r3, r3, #28
 8001b2a:	491b      	ldr	r1, [pc, #108]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_RCC_OscConfig+0x4b4>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7fe ffd5 	bl	8000ae4 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7fe ffd1 	bl	8000ae4 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e064      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x452>
 8001b5c:	e05c      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_RCC_OscConfig+0x4b4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7fe ffbe 	bl	8000ae4 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7fe ffba 	bl	8000ae4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e04d      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x480>
 8001b8a:	e045      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e040      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_RCC_OscConfig+0x538>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d030      	beq.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d129      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d122      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d119      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	085b      	lsrs	r3, r3, #1
 8001bec:	3b01      	subs	r3, #1
 8001bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d10f      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800

08001c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e041      	b.n	8001cbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f839 	bl	8001cc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3304      	adds	r3, #4
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f000 f9d8 	bl	800201c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d001      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e04e      	b.n	8001d92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a23      	ldr	r2, [pc, #140]	; (8001da0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d022      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1e:	d01d      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d018      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d013      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1c      	ldr	r2, [pc, #112]	; (8001dac <HAL_TIM_Base_Start_IT+0xd0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00e      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d004      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d111      	bne.n	8001d80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d010      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7e:	e007      	b.n	8001d90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40000400 	.word	0x40000400
 8001da8:	40000800 	.word	0x40000800
 8001dac:	40000c00 	.word	0x40000c00
 8001db0:	40010400 	.word	0x40010400
 8001db4:	40014000 	.word	0x40014000
 8001db8:	40001800 	.word	0x40001800

08001dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d122      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d11b      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0202 	mvn.w	r2, #2
 8001de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8ee 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8e0 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f8f1 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d122      	bne.n	8001e6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d11b      	bne.n	8001e6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0204 	mvn.w	r2, #4
 8001e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2202      	movs	r2, #2
 8001e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8c4 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001e58:	e005      	b.n	8001e66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f8b6 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f8c7 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d122      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d11b      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0208 	mvn.w	r2, #8
 8001e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2204      	movs	r2, #4
 8001e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f89a 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001eac:	e005      	b.n	8001eba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f88c 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f89d 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d122      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b10      	cmp	r3, #16
 8001eda:	d11b      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0210 	mvn.w	r2, #16
 8001ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2208      	movs	r2, #8
 8001eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f870 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001f00:	e005      	b.n	8001f0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f862 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f873 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10e      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d107      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0201 	mvn.w	r2, #1
 8001f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7fe fc28 	bl	8000790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	2b80      	cmp	r3, #128	; 0x80
 8001f4c:	d10e      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f58:	2b80      	cmp	r3, #128	; 0x80
 8001f5a:	d107      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f902 	bl	8002170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f76:	2b40      	cmp	r3, #64	; 0x40
 8001f78:	d10e      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f84:	2b40      	cmp	r3, #64	; 0x40
 8001f86:	d107      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f838 	bl	8002008 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d107      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0220 	mvn.w	r2, #32
 8001fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8cc 	bl	800215c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a40      	ldr	r2, [pc, #256]	; (8002130 <TIM_Base_SetConfig+0x114>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d013      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203a:	d00f      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3d      	ldr	r2, [pc, #244]	; (8002134 <TIM_Base_SetConfig+0x118>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d00b      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3c      	ldr	r2, [pc, #240]	; (8002138 <TIM_Base_SetConfig+0x11c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d007      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3b      	ldr	r2, [pc, #236]	; (800213c <TIM_Base_SetConfig+0x120>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d003      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3a      	ldr	r2, [pc, #232]	; (8002140 <TIM_Base_SetConfig+0x124>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d108      	bne.n	800206e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2f      	ldr	r2, [pc, #188]	; (8002130 <TIM_Base_SetConfig+0x114>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d02b      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207c:	d027      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2c      	ldr	r2, [pc, #176]	; (8002134 <TIM_Base_SetConfig+0x118>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d023      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2b      	ldr	r2, [pc, #172]	; (8002138 <TIM_Base_SetConfig+0x11c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01f      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a2a      	ldr	r2, [pc, #168]	; (800213c <TIM_Base_SetConfig+0x120>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01b      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a29      	ldr	r2, [pc, #164]	; (8002140 <TIM_Base_SetConfig+0x124>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d017      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a28      	ldr	r2, [pc, #160]	; (8002144 <TIM_Base_SetConfig+0x128>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a27      	ldr	r2, [pc, #156]	; (8002148 <TIM_Base_SetConfig+0x12c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00f      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a26      	ldr	r2, [pc, #152]	; (800214c <TIM_Base_SetConfig+0x130>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00b      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a25      	ldr	r2, [pc, #148]	; (8002150 <TIM_Base_SetConfig+0x134>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a24      	ldr	r2, [pc, #144]	; (8002154 <TIM_Base_SetConfig+0x138>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d003      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a23      	ldr	r2, [pc, #140]	; (8002158 <TIM_Base_SetConfig+0x13c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d108      	bne.n	80020e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <TIM_Base_SetConfig+0x114>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d003      	beq.n	8002114 <TIM_Base_SetConfig+0xf8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <TIM_Base_SetConfig+0x124>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d103      	bne.n	800211c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	615a      	str	r2, [r3, #20]
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40010000 	.word	0x40010000
 8002134:	40000400 	.word	0x40000400
 8002138:	40000800 	.word	0x40000800
 800213c:	40000c00 	.word	0x40000c00
 8002140:	40010400 	.word	0x40010400
 8002144:	40014000 	.word	0x40014000
 8002148:	40014400 	.word	0x40014400
 800214c:	40014800 	.word	0x40014800
 8002150:	40001800 	.word	0x40001800
 8002154:	40001c00 	.word	0x40001c00
 8002158:	40002000 	.word	0x40002000

0800215c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e03f      	b.n	8002216 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7fe fb30 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2224      	movs	r2, #36	; 0x24
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f829 	bl	8002220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002224:	b09f      	sub	sp, #124	; 0x7c
 8002226:	af00      	add	r7, sp, #0
 8002228:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800222a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002236:	68d9      	ldr	r1, [r3, #12]
 8002238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	ea40 0301 	orr.w	r3, r0, r1
 8002240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	431a      	orrs	r2, r3
 800224c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	431a      	orrs	r2, r3
 8002252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4313      	orrs	r3, r2
 8002258:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800225a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002264:	f021 010c 	bic.w	r1, r1, #12
 8002268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800226e:	430b      	orrs	r3, r1
 8002270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800227c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800227e:	6999      	ldr	r1, [r3, #24]
 8002280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	ea40 0301 	orr.w	r3, r0, r1
 8002288:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800228a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4bc5      	ldr	r3, [pc, #788]	; (80025a4 <UART_SetConfig+0x384>)
 8002290:	429a      	cmp	r2, r3
 8002292:	d004      	beq.n	800229e <UART_SetConfig+0x7e>
 8002294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4bc3      	ldr	r3, [pc, #780]	; (80025a8 <UART_SetConfig+0x388>)
 800229a:	429a      	cmp	r2, r3
 800229c:	d103      	bne.n	80022a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800229e:	f7ff f82d 	bl	80012fc <HAL_RCC_GetPCLK2Freq>
 80022a2:	6778      	str	r0, [r7, #116]	; 0x74
 80022a4:	e002      	b.n	80022ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022a6:	f7ff f815 	bl	80012d4 <HAL_RCC_GetPCLK1Freq>
 80022aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b4:	f040 80b6 	bne.w	8002424 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ba:	461c      	mov	r4, r3
 80022bc:	f04f 0500 	mov.w	r5, #0
 80022c0:	4622      	mov	r2, r4
 80022c2:	462b      	mov	r3, r5
 80022c4:	1891      	adds	r1, r2, r2
 80022c6:	6439      	str	r1, [r7, #64]	; 0x40
 80022c8:	415b      	adcs	r3, r3
 80022ca:	647b      	str	r3, [r7, #68]	; 0x44
 80022cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022d0:	1912      	adds	r2, r2, r4
 80022d2:	eb45 0303 	adc.w	r3, r5, r3
 80022d6:	f04f 0000 	mov.w	r0, #0
 80022da:	f04f 0100 	mov.w	r1, #0
 80022de:	00d9      	lsls	r1, r3, #3
 80022e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022e4:	00d0      	lsls	r0, r2, #3
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	1911      	adds	r1, r2, r4
 80022ec:	6639      	str	r1, [r7, #96]	; 0x60
 80022ee:	416b      	adcs	r3, r5
 80022f0:	667b      	str	r3, [r7, #100]	; 0x64
 80022f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	461a      	mov	r2, r3
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	1891      	adds	r1, r2, r2
 80022fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002300:	415b      	adcs	r3, r3
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002308:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800230c:	f7fd ffd8 	bl	80002c0 <__aeabi_uldivmod>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4ba5      	ldr	r3, [pc, #660]	; (80025ac <UART_SetConfig+0x38c>)
 8002316:	fba3 2302 	umull	r2, r3, r3, r2
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	011e      	lsls	r6, r3, #4
 800231e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002320:	461c      	mov	r4, r3
 8002322:	f04f 0500 	mov.w	r5, #0
 8002326:	4622      	mov	r2, r4
 8002328:	462b      	mov	r3, r5
 800232a:	1891      	adds	r1, r2, r2
 800232c:	6339      	str	r1, [r7, #48]	; 0x30
 800232e:	415b      	adcs	r3, r3
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
 8002332:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002336:	1912      	adds	r2, r2, r4
 8002338:	eb45 0303 	adc.w	r3, r5, r3
 800233c:	f04f 0000 	mov.w	r0, #0
 8002340:	f04f 0100 	mov.w	r1, #0
 8002344:	00d9      	lsls	r1, r3, #3
 8002346:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800234a:	00d0      	lsls	r0, r2, #3
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	1911      	adds	r1, r2, r4
 8002352:	65b9      	str	r1, [r7, #88]	; 0x58
 8002354:	416b      	adcs	r3, r5
 8002356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	461a      	mov	r2, r3
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	1891      	adds	r1, r2, r2
 8002364:	62b9      	str	r1, [r7, #40]	; 0x28
 8002366:	415b      	adcs	r3, r3
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800236a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800236e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002372:	f7fd ffa5 	bl	80002c0 <__aeabi_uldivmod>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4b8c      	ldr	r3, [pc, #560]	; (80025ac <UART_SetConfig+0x38c>)
 800237c:	fba3 1302 	umull	r1, r3, r3, r2
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	2164      	movs	r1, #100	; 0x64
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	3332      	adds	r3, #50	; 0x32
 800238e:	4a87      	ldr	r2, [pc, #540]	; (80025ac <UART_SetConfig+0x38c>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800239c:	441e      	add	r6, r3
 800239e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023a0:	4618      	mov	r0, r3
 80023a2:	f04f 0100 	mov.w	r1, #0
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	1894      	adds	r4, r2, r2
 80023ac:	623c      	str	r4, [r7, #32]
 80023ae:	415b      	adcs	r3, r3
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
 80023b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023b6:	1812      	adds	r2, r2, r0
 80023b8:	eb41 0303 	adc.w	r3, r1, r3
 80023bc:	f04f 0400 	mov.w	r4, #0
 80023c0:	f04f 0500 	mov.w	r5, #0
 80023c4:	00dd      	lsls	r5, r3, #3
 80023c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023ca:	00d4      	lsls	r4, r2, #3
 80023cc:	4622      	mov	r2, r4
 80023ce:	462b      	mov	r3, r5
 80023d0:	1814      	adds	r4, r2, r0
 80023d2:	653c      	str	r4, [r7, #80]	; 0x50
 80023d4:	414b      	adcs	r3, r1
 80023d6:	657b      	str	r3, [r7, #84]	; 0x54
 80023d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	461a      	mov	r2, r3
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	1891      	adds	r1, r2, r2
 80023e4:	61b9      	str	r1, [r7, #24]
 80023e6:	415b      	adcs	r3, r3
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80023f2:	f7fd ff65 	bl	80002c0 <__aeabi_uldivmod>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <UART_SetConfig+0x38c>)
 80023fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	2164      	movs	r1, #100	; 0x64
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	3332      	adds	r3, #50	; 0x32
 800240e:	4a67      	ldr	r2, [pc, #412]	; (80025ac <UART_SetConfig+0x38c>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	f003 0207 	and.w	r2, r3, #7
 800241a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4432      	add	r2, r6
 8002420:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002422:	e0b9      	b.n	8002598 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002426:	461c      	mov	r4, r3
 8002428:	f04f 0500 	mov.w	r5, #0
 800242c:	4622      	mov	r2, r4
 800242e:	462b      	mov	r3, r5
 8002430:	1891      	adds	r1, r2, r2
 8002432:	6139      	str	r1, [r7, #16]
 8002434:	415b      	adcs	r3, r3
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800243c:	1912      	adds	r2, r2, r4
 800243e:	eb45 0303 	adc.w	r3, r5, r3
 8002442:	f04f 0000 	mov.w	r0, #0
 8002446:	f04f 0100 	mov.w	r1, #0
 800244a:	00d9      	lsls	r1, r3, #3
 800244c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002450:	00d0      	lsls	r0, r2, #3
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	eb12 0804 	adds.w	r8, r2, r4
 800245a:	eb43 0905 	adc.w	r9, r3, r5
 800245e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4618      	mov	r0, r3
 8002464:	f04f 0100 	mov.w	r1, #0
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	008b      	lsls	r3, r1, #2
 8002472:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002476:	0082      	lsls	r2, r0, #2
 8002478:	4640      	mov	r0, r8
 800247a:	4649      	mov	r1, r9
 800247c:	f7fd ff20 	bl	80002c0 <__aeabi_uldivmod>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4b49      	ldr	r3, [pc, #292]	; (80025ac <UART_SetConfig+0x38c>)
 8002486:	fba3 2302 	umull	r2, r3, r3, r2
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	011e      	lsls	r6, r3, #4
 800248e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002490:	4618      	mov	r0, r3
 8002492:	f04f 0100 	mov.w	r1, #0
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	1894      	adds	r4, r2, r2
 800249c:	60bc      	str	r4, [r7, #8]
 800249e:	415b      	adcs	r3, r3
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024a6:	1812      	adds	r2, r2, r0
 80024a8:	eb41 0303 	adc.w	r3, r1, r3
 80024ac:	f04f 0400 	mov.w	r4, #0
 80024b0:	f04f 0500 	mov.w	r5, #0
 80024b4:	00dd      	lsls	r5, r3, #3
 80024b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80024ba:	00d4      	lsls	r4, r2, #3
 80024bc:	4622      	mov	r2, r4
 80024be:	462b      	mov	r3, r5
 80024c0:	1814      	adds	r4, r2, r0
 80024c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80024c4:	414b      	adcs	r3, r1
 80024c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f04f 0100 	mov.w	r1, #0
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	008b      	lsls	r3, r1, #2
 80024dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80024e0:	0082      	lsls	r2, r0, #2
 80024e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80024e6:	f7fd feeb 	bl	80002c0 <__aeabi_uldivmod>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <UART_SetConfig+0x38c>)
 80024f0:	fba3 1302 	umull	r1, r3, r3, r2
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	2164      	movs	r1, #100	; 0x64
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	3332      	adds	r3, #50	; 0x32
 8002502:	4a2a      	ldr	r2, [pc, #168]	; (80025ac <UART_SetConfig+0x38c>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800250e:	441e      	add	r6, r3
 8002510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002512:	4618      	mov	r0, r3
 8002514:	f04f 0100 	mov.w	r1, #0
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	1894      	adds	r4, r2, r2
 800251e:	603c      	str	r4, [r7, #0]
 8002520:	415b      	adcs	r3, r3
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002528:	1812      	adds	r2, r2, r0
 800252a:	eb41 0303 	adc.w	r3, r1, r3
 800252e:	f04f 0400 	mov.w	r4, #0
 8002532:	f04f 0500 	mov.w	r5, #0
 8002536:	00dd      	lsls	r5, r3, #3
 8002538:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800253c:	00d4      	lsls	r4, r2, #3
 800253e:	4622      	mov	r2, r4
 8002540:	462b      	mov	r3, r5
 8002542:	eb12 0a00 	adds.w	sl, r2, r0
 8002546:	eb43 0b01 	adc.w	fp, r3, r1
 800254a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4618      	mov	r0, r3
 8002550:	f04f 0100 	mov.w	r1, #0
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	008b      	lsls	r3, r1, #2
 800255e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002562:	0082      	lsls	r2, r0, #2
 8002564:	4650      	mov	r0, sl
 8002566:	4659      	mov	r1, fp
 8002568:	f7fd feaa 	bl	80002c0 <__aeabi_uldivmod>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <UART_SetConfig+0x38c>)
 8002572:	fba3 1302 	umull	r1, r3, r3, r2
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	2164      	movs	r1, #100	; 0x64
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	3332      	adds	r3, #50	; 0x32
 8002584:	4a09      	ldr	r2, [pc, #36]	; (80025ac <UART_SetConfig+0x38c>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	f003 020f 	and.w	r2, r3, #15
 8002590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4432      	add	r2, r6
 8002596:	609a      	str	r2, [r3, #8]
}
 8002598:	bf00      	nop
 800259a:	377c      	adds	r7, #124	; 0x7c
 800259c:	46bd      	mov	sp, r7
 800259e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025a2:	bf00      	nop
 80025a4:	40011000 	.word	0x40011000
 80025a8:	40011400 	.word	0x40011400
 80025ac:	51eb851f 	.word	0x51eb851f

080025b0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f103 0208 	add.w	r2, r3, #8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295
 80025c8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f103 0208 	add.w	r2, r3, #8
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f103 0208 	add.w	r2, r3, #8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d103      	bne.n	800262a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	e00c      	b.n	8002644 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3308      	adds	r3, #8
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	e002      	b.n	8002638 <vListInsert+0x2e>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	429a      	cmp	r2, r3
 8002642:	d2f6      	bcs.n	8002632 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	601a      	str	r2, [r3, #0]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6892      	ldr	r2, [r2, #8]
 8002692:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6852      	ldr	r2, [r2, #4]
 800269c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d103      	bne.n	80026b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	1e5a      	subs	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80026da:	2301      	movs	r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10a      	bne.n	80026fe <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80026e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80026fa:	bf00      	nop
 80026fc:	e7fe      	b.n	80026fc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d05d      	beq.n	80027c0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002708:	2b00      	cmp	r3, #0
 800270a:	d059      	beq.n	80027c0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	2100      	movs	r1, #0
 8002716:	fba3 2302 	umull	r2, r3, r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d000      	beq.n	8002720 <xQueueGenericReset+0x50>
 800271e:	2101      	movs	r1, #1
 8002720:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002722:	2b00      	cmp	r3, #0
 8002724:	d14c      	bne.n	80027c0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002726:	f001 fe0f 	bl	8004348 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002732:	6939      	ldr	r1, [r7, #16]
 8002734:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	441a      	add	r2, r3
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2200      	movs	r2, #0
 8002744:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002756:	3b01      	subs	r3, #1
 8002758:	6939      	ldr	r1, [r7, #16]
 800275a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	441a      	add	r2, r3
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	22ff      	movs	r2, #255	; 0xff
 800276a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	22ff      	movs	r2, #255	; 0xff
 8002772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d114      	bne.n	80027a6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01a      	beq.n	80027ba <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	3310      	adds	r3, #16
 8002788:	4618      	mov	r0, r3
 800278a:	f000 ff79 	bl	8003680 <xTaskRemoveFromEventList>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d012      	beq.n	80027ba <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <xQueueGenericReset+0x11c>)
 8002796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	e009      	b.n	80027ba <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	3310      	adds	r3, #16
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff00 	bl	80025b0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	3324      	adds	r3, #36	; 0x24
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fefb 	bl	80025b0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80027ba:	f001 fdf5 	bl	80043a8 <vPortExitCritical>
 80027be:	e001      	b.n	80027c4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10a      	bne.n	80027e0 <xQueueGenericReset+0x110>
        __asm volatile
 80027ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ce:	f383 8811 	msr	BASEPRI, r3
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	60bb      	str	r3, [r7, #8]
    }
 80027dc:	bf00      	nop
 80027de:	e7fe      	b.n	80027de <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80027e0:	697b      	ldr	r3, [r7, #20]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	e000ed04 	.word	0xe000ed04

080027f0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	; 0x28
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	4613      	mov	r3, r2
 80027fc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d02e      	beq.n	8002866 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002808:	2100      	movs	r1, #0
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	fba3 2302 	umull	r2, r3, r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d000      	beq.n	8002818 <xQueueGenericCreate+0x28>
 8002816:	2101      	movs	r1, #1
 8002818:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800281a:	2b00      	cmp	r3, #0
 800281c:	d123      	bne.n	8002866 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002826:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800282a:	d81c      	bhi.n	8002866 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	fb02 f303 	mul.w	r3, r2, r3
 8002834:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	3350      	adds	r3, #80	; 0x50
 800283a:	4618      	mov	r0, r3
 800283c:	f001 fe66 	bl	800450c <pvPortMalloc>
 8002840:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01c      	beq.n	8002882 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3350      	adds	r3, #80	; 0x50
 8002850:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002852:	79fa      	ldrb	r2, [r7, #7]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	4613      	mov	r3, r2
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f814 	bl	800288c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002864:	e00d      	b.n	8002882 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <xQueueGenericCreate+0x92>
        __asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	613b      	str	r3, [r7, #16]
    }
 800287e:	bf00      	nop
 8002880:	e7fe      	b.n	8002880 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002882:	69fb      	ldr	r3, [r7, #28]
    }
 8002884:	4618      	mov	r0, r3
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d103      	bne.n	80028a8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e002      	b.n	80028ae <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028ba:	2101      	movs	r1, #1
 80028bc:	69b8      	ldr	r0, [r7, #24]
 80028be:	f7ff ff07 	bl	80026d0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08c      	sub	sp, #48	; 0x30
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10a      	bne.n	8002904 <xQueueReceive+0x30>
        __asm volatile
 80028ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f2:	f383 8811 	msr	BASEPRI, r3
 80028f6:	f3bf 8f6f 	isb	sy
 80028fa:	f3bf 8f4f 	dsb	sy
 80028fe:	623b      	str	r3, [r7, #32]
    }
 8002900:	bf00      	nop
 8002902:	e7fe      	b.n	8002902 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <xQueueReceive+0x3e>
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <xQueueReceive+0x42>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <xQueueReceive+0x44>
 8002916:	2300      	movs	r3, #0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10a      	bne.n	8002932 <xQueueReceive+0x5e>
        __asm volatile
 800291c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002920:	f383 8811 	msr	BASEPRI, r3
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	61fb      	str	r3, [r7, #28]
    }
 800292e:	bf00      	nop
 8002930:	e7fe      	b.n	8002930 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002932:	f001 f8b5 	bl	8003aa0 <xTaskGetSchedulerState>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <xQueueReceive+0x6e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <xQueueReceive+0x72>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <xQueueReceive+0x74>
 8002946:	2300      	movs	r3, #0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <xQueueReceive+0x8e>
        __asm volatile
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	61bb      	str	r3, [r7, #24]
    }
 800295e:	bf00      	nop
 8002960:	e7fe      	b.n	8002960 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002962:	f001 fcf1 	bl	8004348 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01f      	beq.n	80029b2 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002976:	f000 f88d 	bl	8002a94 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	1e5a      	subs	r2, r3, #1
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00f      	beq.n	80029aa <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	3310      	adds	r3, #16
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fe76 	bl	8003680 <xTaskRemoveFromEventList>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800299a:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <xQueueReceive+0x1bc>)
 800299c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f3bf 8f4f 	dsb	sy
 80029a6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80029aa:	f001 fcfd 	bl	80043a8 <vPortExitCritical>
                return pdPASS;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e069      	b.n	8002a86 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d103      	bne.n	80029c0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80029b8:	f001 fcf6 	bl	80043a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80029bc:	2300      	movs	r3, #0
 80029be:	e062      	b.n	8002a86 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80029c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029c6:	f107 0310 	add.w	r3, r7, #16
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 ff2e 	bl	800382c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80029d0:	2301      	movs	r3, #1
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80029d4:	f001 fce8 	bl	80043a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029d8:	f000 fb5c 	bl	8003094 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80029dc:	f001 fcb4 	bl	8004348 <vPortEnterCritical>
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029e6:	b25b      	sxtb	r3, r3
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d103      	bne.n	80029f6 <xQueueReceive+0x122>
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029fc:	b25b      	sxtb	r3, r3
 80029fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a02:	d103      	bne.n	8002a0c <xQueueReceive+0x138>
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a0c:	f001 fccc 	bl	80043a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a10:	1d3a      	adds	r2, r7, #4
 8002a12:	f107 0310 	add.w	r3, r7, #16
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 ff1d 	bl	8003858 <xTaskCheckForTimeOut>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d123      	bne.n	8002a6c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a26:	f000 f8ad 	bl	8002b84 <prvIsQueueEmpty>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d017      	beq.n	8002a60 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	3324      	adds	r3, #36	; 0x24
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fdb7 	bl	80035ac <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a40:	f000 f84e 	bl	8002ae0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a44:	f000 fb34 	bl	80030b0 <xTaskResumeAll>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d189      	bne.n	8002962 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <xQueueReceive+0x1bc>)
 8002a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	f3bf 8f6f 	isb	sy
 8002a5e:	e780      	b.n	8002962 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a62:	f000 f83d 	bl	8002ae0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a66:	f000 fb23 	bl	80030b0 <xTaskResumeAll>
 8002a6a:	e77a      	b.n	8002962 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a6e:	f000 f837 	bl	8002ae0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a72:	f000 fb1d 	bl	80030b0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a78:	f000 f884 	bl	8002b84 <prvIsQueueEmpty>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f43f af6f 	beq.w	8002962 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002a84:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3730      	adds	r7, #48	; 0x30
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	e000ed04 	.word	0xe000ed04

08002a94 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d018      	beq.n	8002ad8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	441a      	add	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d303      	bcc.n	8002ac8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68d9      	ldr	r1, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	6838      	ldr	r0, [r7, #0]
 8002ad4:	f001 fff2 	bl	8004abc <memcpy>
    }
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002ae8:	f001 fc2e 	bl	8004348 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002af2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002af4:	e011      	b.n	8002b1a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d012      	beq.n	8002b24 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3324      	adds	r3, #36	; 0x24
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fdbc 	bl	8003680 <xTaskRemoveFromEventList>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002b0e:	f000 ff09 	bl	8003924 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	dce9      	bgt.n	8002af6 <prvUnlockQueue+0x16>
 8002b22:	e000      	b.n	8002b26 <prvUnlockQueue+0x46>
                    break;
 8002b24:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	22ff      	movs	r2, #255	; 0xff
 8002b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002b2e:	f001 fc3b 	bl	80043a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b32:	f001 fc09 	bl	8004348 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b3c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b3e:	e011      	b.n	8002b64 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d012      	beq.n	8002b6e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3310      	adds	r3, #16
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fd97 	bl	8003680 <xTaskRemoveFromEventList>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002b58:	f000 fee4 	bl	8003924 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002b5c:	7bbb      	ldrb	r3, [r7, #14]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	dce9      	bgt.n	8002b40 <prvUnlockQueue+0x60>
 8002b6c:	e000      	b.n	8002b70 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b6e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	22ff      	movs	r2, #255	; 0xff
 8002b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002b78:	f001 fc16 	bl	80043a8 <vPortExitCritical>
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b8c:	f001 fbdc 	bl	8004348 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d102      	bne.n	8002b9e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	e001      	b.n	8002ba2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ba2:	f001 fc01 	bl	80043a8 <vPortExitCritical>

    return xReturn;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	60fb      	str	r3, [r7, #12]
    }
 8002bd6:	bf00      	nop
 8002bd8:	e7fe      	b.n	8002bd8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d024      	beq.n	8002c2a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	e01e      	b.n	8002c24 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002be6:	4a18      	ldr	r2, [pc, #96]	; (8002c48 <vQueueAddToRegistry+0x98>)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d105      	bne.n	8002c02 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4a13      	ldr	r2, [pc, #76]	; (8002c48 <vQueueAddToRegistry+0x98>)
 8002bfc:	4413      	add	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
                    break;
 8002c00:	e013      	b.n	8002c2a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10a      	bne.n	8002c1e <vQueueAddToRegistry+0x6e>
 8002c08:	4a0f      	ldr	r2, [pc, #60]	; (8002c48 <vQueueAddToRegistry+0x98>)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d104      	bne.n	8002c1e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <vQueueAddToRegistry+0x98>)
 8002c1a:	4413      	add	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	3301      	adds	r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2b07      	cmp	r3, #7
 8002c28:	d9dd      	bls.n	8002be6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002c3c:	bf00      	nop
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	20012e98 	.word	0x20012e98

08002c4c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002c5c:	f001 fb74 	bl	8004348 <vPortEnterCritical>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c66:	b25b      	sxtb	r3, r3
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d103      	bne.n	8002c76 <vQueueWaitForMessageRestricted+0x2a>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c82:	d103      	bne.n	8002c8c <vQueueWaitForMessageRestricted+0x40>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c8c:	f001 fb8c 	bl	80043a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d106      	bne.n	8002ca6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3324      	adds	r3, #36	; 0x24
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fca7 	bl	80035f4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f7ff ff1a 	bl	8002ae0 <prvUnlockQueue>
    }
 8002cac:	bf00      	nop
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08c      	sub	sp, #48	; 0x30
 8002cb8:	af04      	add	r7, sp, #16
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f001 fc1f 	bl	800450c <pvPortMalloc>
 8002cce:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d013      	beq.n	8002cfe <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cd6:	2058      	movs	r0, #88	; 0x58
 8002cd8:	f001 fc18 	bl	800450c <pvPortMalloc>
 8002cdc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002ce4:	2258      	movs	r2, #88	; 0x58
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	69f8      	ldr	r0, [r7, #28]
 8002cea:	f001 fef5 	bl	8004ad8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cf4:	e005      	b.n	8002d02 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002cf6:	6978      	ldr	r0, [r7, #20]
 8002cf8:	f001 fce8 	bl	80046cc <vPortFree>
 8002cfc:	e001      	b.n	8002d02 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d013      	beq.n	8002d30 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d08:	88fa      	ldrh	r2, [r7, #6]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9303      	str	r3, [sp, #12]
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	9302      	str	r3, [sp, #8]
 8002d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f80e 	bl	8002d40 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d24:	69f8      	ldr	r0, [r7, #28]
 8002d26:	f000 f899 	bl	8002e5c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	e002      	b.n	8002d36 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d30:	f04f 33ff 	mov.w	r3, #4294967295
 8002d34:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d36:	69bb      	ldr	r3, [r7, #24]
    }
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3720      	adds	r7, #32
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	461a      	mov	r2, r3
 8002d58:	21a5      	movs	r1, #165	; 0xa5
 8002d5a:	f001 febd 	bl	8004ad8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	f023 0307 	bic.w	r3, r3, #7
 8002d76:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	617b      	str	r3, [r7, #20]
    }
 8002d94:	bf00      	nop
 8002d96:	e7fe      	b.n	8002d96 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01e      	beq.n	8002ddc <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	e012      	b.n	8002dca <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	4413      	add	r3, r2
 8002daa:	7819      	ldrb	r1, [r3, #0]
 8002dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	3334      	adds	r3, #52	; 0x34
 8002db4:	460a      	mov	r2, r1
 8002db6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d006      	beq.n	8002dd2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	2b09      	cmp	r3, #9
 8002dce:	d9e9      	bls.n	8002da4 <prvInitialiseNewTask+0x64>
 8002dd0:	e000      	b.n	8002dd4 <prvInitialiseNewTask+0x94>
            {
                break;
 8002dd2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d90a      	bls.n	8002df8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	613b      	str	r3, [r7, #16]
    }
 8002df4:	bf00      	nop
 8002df6:	e7fe      	b.n	8002df6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d901      	bls.n	8002e02 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dfe:	2304      	movs	r3, #4
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e0c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	3304      	adds	r3, #4
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fbec 	bl	80025f0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	3318      	adds	r3, #24
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fbe7 	bl	80025f0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e26:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	f1c3 0205 	rsb	r2, r3, #5
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	68f9      	ldr	r1, [r7, #12]
 8002e3c:	69b8      	ldr	r0, [r7, #24]
 8002e3e:	f001 f951 	bl	80040e4 <pxPortInitialiseStack>
 8002e42:	4602      	mov	r2, r0
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e52:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e54:	bf00      	nop
 8002e56:	3720      	adds	r7, #32
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e64:	f001 fa70 	bl	8004348 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e68:	4b40      	ldr	r3, [pc, #256]	; (8002f6c <prvAddNewTaskToReadyList+0x110>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	4a3f      	ldr	r2, [pc, #252]	; (8002f6c <prvAddNewTaskToReadyList+0x110>)
 8002e70:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002e72:	4b3f      	ldr	r3, [pc, #252]	; (8002f70 <prvAddNewTaskToReadyList+0x114>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e7a:	4a3d      	ldr	r2, [pc, #244]	; (8002f70 <prvAddNewTaskToReadyList+0x114>)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e80:	4b3a      	ldr	r3, [pc, #232]	; (8002f6c <prvAddNewTaskToReadyList+0x110>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d110      	bne.n	8002eaa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e88:	f000 fd70 	bl	800396c <prvInitialiseTaskLists>
 8002e8c:	e00d      	b.n	8002eaa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e8e:	4b39      	ldr	r3, [pc, #228]	; (8002f74 <prvAddNewTaskToReadyList+0x118>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e96:	4b36      	ldr	r3, [pc, #216]	; (8002f70 <prvAddNewTaskToReadyList+0x114>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d802      	bhi.n	8002eaa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ea4:	4a32      	ldr	r2, [pc, #200]	; (8002f70 <prvAddNewTaskToReadyList+0x114>)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002eaa:	4b33      	ldr	r3, [pc, #204]	; (8002f78 <prvAddNewTaskToReadyList+0x11c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	4a31      	ldr	r2, [pc, #196]	; (8002f78 <prvAddNewTaskToReadyList+0x11c>)
 8002eb2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002eb4:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <prvAddNewTaskToReadyList+0x11c>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	4b2d      	ldr	r3, [pc, #180]	; (8002f7c <prvAddNewTaskToReadyList+0x120>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	4a2c      	ldr	r2, [pc, #176]	; (8002f7c <prvAddNewTaskToReadyList+0x120>)
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed2:	492b      	ldr	r1, [pc, #172]	; (8002f80 <prvAddNewTaskToReadyList+0x124>)
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3304      	adds	r3, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	3204      	adds	r2, #4
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	1d1a      	adds	r2, r3, #4
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4a1b      	ldr	r2, [pc, #108]	; (8002f80 <prvAddNewTaskToReadyList+0x124>)
 8002f12:	441a      	add	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	615a      	str	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1c:	4918      	ldr	r1, [pc, #96]	; (8002f80 <prvAddNewTaskToReadyList+0x124>)
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	1c59      	adds	r1, r3, #1
 8002f2c:	4814      	ldr	r0, [pc, #80]	; (8002f80 <prvAddNewTaskToReadyList+0x124>)
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4403      	add	r3, r0
 8002f38:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f3a:	f001 fa35 	bl	80043a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <prvAddNewTaskToReadyList+0x118>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00e      	beq.n	8002f64 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <prvAddNewTaskToReadyList+0x114>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d207      	bcs.n	8002f64 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <prvAddNewTaskToReadyList+0x128>)
 8002f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000170 	.word	0x20000170
 8002f70:	20000098 	.word	0x20000098
 8002f74:	2000017c 	.word	0x2000017c
 8002f78:	2000018c 	.word	0x2000018c
 8002f7c:	20000178 	.word	0x20000178
 8002f80:	2000009c 	.word	0x2000009c
 8002f84:	e000ed04 	.word	0xe000ed04

08002f88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d017      	beq.n	8002fca <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002f9a:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <vTaskDelay+0x60>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <vTaskDelay+0x30>
        __asm volatile
 8002fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	60bb      	str	r3, [r7, #8]
    }
 8002fb4:	bf00      	nop
 8002fb6:	e7fe      	b.n	8002fb6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002fb8:	f000 f86c 	bl	8003094 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fd8c 	bl	8003adc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002fc4:	f000 f874 	bl	80030b0 <xTaskResumeAll>
 8002fc8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d107      	bne.n	8002fe0 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <vTaskDelay+0x64>)
 8002fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20000198 	.word	0x20000198
 8002fec:	e000ed04 	.word	0xe000ed04

08002ff0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002ff6:	4b20      	ldr	r3, [pc, #128]	; (8003078 <vTaskStartScheduler+0x88>)
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2300      	movs	r3, #0
 8003000:	2282      	movs	r2, #130	; 0x82
 8003002:	491e      	ldr	r1, [pc, #120]	; (800307c <vTaskStartScheduler+0x8c>)
 8003004:	481e      	ldr	r0, [pc, #120]	; (8003080 <vTaskStartScheduler+0x90>)
 8003006:	f7ff fe55 	bl	8002cb4 <xTaskCreate>
 800300a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d102      	bne.n	8003018 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003012:	f000 fde3 	bl	8003bdc <xTimerCreateTimerTask>
 8003016:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d116      	bne.n	800304c <vTaskStartScheduler+0x5c>
        __asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	60bb      	str	r3, [r7, #8]
    }
 8003030:	bf00      	nop
             * for additional information. */
            _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
        }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003032:	4b14      	ldr	r3, [pc, #80]	; (8003084 <vTaskStartScheduler+0x94>)
 8003034:	f04f 32ff 	mov.w	r2, #4294967295
 8003038:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <vTaskStartScheduler+0x98>)
 800303c:	2201      	movs	r2, #1
 800303e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <vTaskStartScheduler+0x9c>)
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003046:	f001 f8dd 	bl	8004204 <xPortStartScheduler>
 800304a:	e00e      	b.n	800306a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d10a      	bne.n	800306a <vTaskStartScheduler+0x7a>
        __asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	607b      	str	r3, [r7, #4]
    }
 8003066:	bf00      	nop
 8003068:	e7fe      	b.n	8003068 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <vTaskStartScheduler+0xa0>)
 800306c:	681b      	ldr	r3, [r3, #0]
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000194 	.word	0x20000194
 800307c:	08005340 	.word	0x08005340
 8003080:	0800393d 	.word	0x0800393d
 8003084:	20000190 	.word	0x20000190
 8003088:	2000017c 	.word	0x2000017c
 800308c:	20000174 	.word	0x20000174
 8003090:	2000000c 	.word	0x2000000c

08003094 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <vTaskSuspendAll+0x18>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	4a03      	ldr	r2, [pc, #12]	; (80030ac <vTaskSuspendAll+0x18>)
 80030a0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	20000198 	.word	0x20000198

080030b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80030be:	4b71      	ldr	r3, [pc, #452]	; (8003284 <xTaskResumeAll+0x1d4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10a      	bne.n	80030dc <xTaskResumeAll+0x2c>
        __asm volatile
 80030c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ca:	f383 8811 	msr	BASEPRI, r3
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	607b      	str	r3, [r7, #4]
    }
 80030d8:	bf00      	nop
 80030da:	e7fe      	b.n	80030da <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80030dc:	f001 f934 	bl	8004348 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80030e0:	4b68      	ldr	r3, [pc, #416]	; (8003284 <xTaskResumeAll+0x1d4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	4a67      	ldr	r2, [pc, #412]	; (8003284 <xTaskResumeAll+0x1d4>)
 80030e8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030ea:	4b66      	ldr	r3, [pc, #408]	; (8003284 <xTaskResumeAll+0x1d4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f040 80c0 	bne.w	8003274 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030f4:	4b64      	ldr	r3, [pc, #400]	; (8003288 <xTaskResumeAll+0x1d8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80bb 	beq.w	8003274 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030fe:	e08a      	b.n	8003216 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003100:	4b62      	ldr	r3, [pc, #392]	; (800328c <xTaskResumeAll+0x1dc>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	6a12      	ldr	r2, [r2, #32]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	69d2      	ldr	r2, [r2, #28]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	3318      	adds	r3, #24
 800312a:	429a      	cmp	r2, r3
 800312c:	d103      	bne.n	8003136 <xTaskResumeAll+0x86>
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	6a1a      	ldr	r2, [r3, #32]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	2200      	movs	r2, #0
 800313a:	629a      	str	r2, [r3, #40]	; 0x28
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	1e5a      	subs	r2, r3, #1
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	68d2      	ldr	r2, [r2, #12]
 8003154:	609a      	str	r2, [r3, #8]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	6892      	ldr	r2, [r2, #8]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	3304      	adds	r3, #4
 8003168:	429a      	cmp	r2, r3
 800316a:	d103      	bne.n	8003174 <xTaskResumeAll+0xc4>
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	2200      	movs	r2, #0
 8003178:	615a      	str	r2, [r3, #20]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	1e5a      	subs	r2, r3, #1
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	2201      	movs	r2, #1
 800318a:	409a      	lsls	r2, r3
 800318c:	4b40      	ldr	r3, [pc, #256]	; (8003290 <xTaskResumeAll+0x1e0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4313      	orrs	r3, r2
 8003192:	4a3f      	ldr	r2, [pc, #252]	; (8003290 <xTaskResumeAll+0x1e0>)
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319a:	493e      	ldr	r1, [pc, #248]	; (8003294 <xTaskResumeAll+0x1e4>)
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	3304      	adds	r3, #4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60bb      	str	r3, [r7, #8]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	609a      	str	r2, [r3, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	3204      	adds	r2, #4
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	1d1a      	adds	r2, r3, #4
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4a2e      	ldr	r2, [pc, #184]	; (8003294 <xTaskResumeAll+0x1e4>)
 80031da:	441a      	add	r2, r3
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	615a      	str	r2, [r3, #20]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e4:	492b      	ldr	r1, [pc, #172]	; (8003294 <xTaskResumeAll+0x1e4>)
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	1c59      	adds	r1, r3, #1
 80031f4:	4827      	ldr	r0, [pc, #156]	; (8003294 <xTaskResumeAll+0x1e4>)
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4403      	add	r3, r0
 8003200:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003206:	4b24      	ldr	r3, [pc, #144]	; (8003298 <xTaskResumeAll+0x1e8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	429a      	cmp	r2, r3
 800320e:	d302      	bcc.n	8003216 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8003210:	4b22      	ldr	r3, [pc, #136]	; (800329c <xTaskResumeAll+0x1ec>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003216:	4b1d      	ldr	r3, [pc, #116]	; (800328c <xTaskResumeAll+0x1dc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f47f af70 	bne.w	8003100 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003226:	f000 fc1f 	bl	8003a68 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <xTaskResumeAll+0x1f0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d010      	beq.n	8003258 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003236:	f000 f847 	bl	80032c8 <xTaskIncrementTick>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <xTaskResumeAll+0x1ec>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	3b01      	subs	r3, #1
 800324a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f1      	bne.n	8003236 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003252:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <xTaskResumeAll+0x1f0>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003258:	4b10      	ldr	r3, [pc, #64]	; (800329c <xTaskResumeAll+0x1ec>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d009      	beq.n	8003274 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003260:	2301      	movs	r3, #1
 8003262:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <xTaskResumeAll+0x1f4>)
 8003266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003274:	f001 f898 	bl	80043a8 <vPortExitCritical>

    return xAlreadyYielded;
 8003278:	69bb      	ldr	r3, [r7, #24]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3720      	adds	r7, #32
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000198 	.word	0x20000198
 8003288:	20000170 	.word	0x20000170
 800328c:	20000130 	.word	0x20000130
 8003290:	20000178 	.word	0x20000178
 8003294:	2000009c 	.word	0x2000009c
 8003298:	20000098 	.word	0x20000098
 800329c:	20000184 	.word	0x20000184
 80032a0:	20000180 	.word	0x20000180
 80032a4:	e000ed04 	.word	0xe000ed04

080032a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <xTaskGetTickCount+0x1c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80032b4:	687b      	ldr	r3, [r7, #4]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20000174 	.word	0x20000174

080032c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	; 0x28
 80032cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032d2:	4b7d      	ldr	r3, [pc, #500]	; (80034c8 <xTaskIncrementTick+0x200>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f040 80ec 	bne.w	80034b4 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032dc:	4b7b      	ldr	r3, [pc, #492]	; (80034cc <xTaskIncrementTick+0x204>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80032e4:	4a79      	ldr	r2, [pc, #484]	; (80034cc <xTaskIncrementTick+0x204>)
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d120      	bne.n	8003332 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80032f0:	4b77      	ldr	r3, [pc, #476]	; (80034d0 <xTaskIncrementTick+0x208>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <xTaskIncrementTick+0x48>
        __asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	607b      	str	r3, [r7, #4]
    }
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <xTaskIncrementTick+0x46>
 8003310:	4b6f      	ldr	r3, [pc, #444]	; (80034d0 <xTaskIncrementTick+0x208>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	4b6f      	ldr	r3, [pc, #444]	; (80034d4 <xTaskIncrementTick+0x20c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a6d      	ldr	r2, [pc, #436]	; (80034d0 <xTaskIncrementTick+0x208>)
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4a6d      	ldr	r2, [pc, #436]	; (80034d4 <xTaskIncrementTick+0x20c>)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b6c      	ldr	r3, [pc, #432]	; (80034d8 <xTaskIncrementTick+0x210>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	4a6b      	ldr	r2, [pc, #428]	; (80034d8 <xTaskIncrementTick+0x210>)
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	f000 fb9b 	bl	8003a68 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003332:	4b6a      	ldr	r3, [pc, #424]	; (80034dc <xTaskIncrementTick+0x214>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6a3a      	ldr	r2, [r7, #32]
 8003338:	429a      	cmp	r2, r3
 800333a:	f0c0 80a6 	bcc.w	800348a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800333e:	4b64      	ldr	r3, [pc, #400]	; (80034d0 <xTaskIncrementTick+0x208>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d104      	bne.n	8003352 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003348:	4b64      	ldr	r3, [pc, #400]	; (80034dc <xTaskIncrementTick+0x214>)
 800334a:	f04f 32ff 	mov.w	r2, #4294967295
 800334e:	601a      	str	r2, [r3, #0]
                    break;
 8003350:	e09b      	b.n	800348a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003352:	4b5f      	ldr	r3, [pc, #380]	; (80034d0 <xTaskIncrementTick+0x208>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003362:	6a3a      	ldr	r2, [r7, #32]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	429a      	cmp	r2, r3
 8003368:	d203      	bcs.n	8003372 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800336a:	4a5c      	ldr	r2, [pc, #368]	; (80034dc <xTaskIncrementTick+0x214>)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003370:	e08b      	b.n	800348a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	68d2      	ldr	r2, [r2, #12]
 8003380:	609a      	str	r2, [r3, #8]
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	6892      	ldr	r2, [r2, #8]
 800338a:	605a      	str	r2, [r3, #4]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	3304      	adds	r3, #4
 8003394:	429a      	cmp	r2, r3
 8003396:	d103      	bne.n	80033a0 <xTaskIncrementTick+0xd8>
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	605a      	str	r2, [r3, #4]
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2200      	movs	r2, #0
 80033a4:	615a      	str	r2, [r3, #20]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	1e5a      	subs	r2, r3, #1
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01e      	beq.n	80033f6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	6a12      	ldr	r2, [r2, #32]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	69d2      	ldr	r2, [r2, #28]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	3318      	adds	r3, #24
 80033da:	429a      	cmp	r2, r3
 80033dc:	d103      	bne.n	80033e6 <xTaskIncrementTick+0x11e>
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	6a1a      	ldr	r2, [r3, #32]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2200      	movs	r2, #0
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	1e5a      	subs	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	2201      	movs	r2, #1
 80033fc:	409a      	lsls	r2, r3
 80033fe:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <xTaskIncrementTick+0x218>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	4a36      	ldr	r2, [pc, #216]	; (80034e0 <xTaskIncrementTick+0x218>)
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	4935      	ldr	r1, [pc, #212]	; (80034e4 <xTaskIncrementTick+0x21c>)
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	3304      	adds	r3, #4
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	60da      	str	r2, [r3, #12]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	3204      	adds	r2, #4
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	1d1a      	adds	r2, r3, #4
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	609a      	str	r2, [r3, #8]
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4a26      	ldr	r2, [pc, #152]	; (80034e4 <xTaskIncrementTick+0x21c>)
 800344c:	441a      	add	r2, r3
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	615a      	str	r2, [r3, #20]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003456:	4923      	ldr	r1, [pc, #140]	; (80034e4 <xTaskIncrementTick+0x21c>)
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	1c59      	adds	r1, r3, #1
 8003466:	481f      	ldr	r0, [pc, #124]	; (80034e4 <xTaskIncrementTick+0x21c>)
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4403      	add	r3, r0
 8003472:	6019      	str	r1, [r3, #0]
                    {
                        /* Preemption is on, but a context switch should
                         * only be performed if the unblocked task has a
                         * priority that is equal to or higher than the
                         * currently executing task. */
                        if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003478:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <xTaskIncrementTick+0x220>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	429a      	cmp	r2, r3
 8003480:	f4ff af5d 	bcc.w	800333e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003484:	2301      	movs	r3, #1
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003488:	e759      	b.n	800333e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800348a:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <xTaskIncrementTick+0x220>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003490:	4914      	ldr	r1, [pc, #80]	; (80034e4 <xTaskIncrementTick+0x21c>)
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d901      	bls.n	80034a6 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 80034a2:	2301      	movs	r3, #1
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80034a6:	4b11      	ldr	r3, [pc, #68]	; (80034ec <xTaskIncrementTick+0x224>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d007      	beq.n	80034be <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 80034ae:	2301      	movs	r3, #1
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
 80034b2:	e004      	b.n	80034be <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <xTaskIncrementTick+0x228>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3301      	adds	r3, #1
 80034ba:	4a0d      	ldr	r2, [pc, #52]	; (80034f0 <xTaskIncrementTick+0x228>)
 80034bc:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3728      	adds	r7, #40	; 0x28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000198 	.word	0x20000198
 80034cc:	20000174 	.word	0x20000174
 80034d0:	20000128 	.word	0x20000128
 80034d4:	2000012c 	.word	0x2000012c
 80034d8:	20000188 	.word	0x20000188
 80034dc:	20000190 	.word	0x20000190
 80034e0:	20000178 	.word	0x20000178
 80034e4:	2000009c 	.word	0x2000009c
 80034e8:	20000098 	.word	0x20000098
 80034ec:	20000184 	.word	0x20000184
 80034f0:	20000180 	.word	0x20000180

080034f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034fa:	4b27      	ldr	r3, [pc, #156]	; (8003598 <vTaskSwitchContext+0xa4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003502:	4b26      	ldr	r3, [pc, #152]	; (800359c <vTaskSwitchContext+0xa8>)
 8003504:	2201      	movs	r2, #1
 8003506:	601a      	str	r2, [r3, #0]
             * for additional information. */
            _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
        }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003508:	e03f      	b.n	800358a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800350a:	4b24      	ldr	r3, [pc, #144]	; (800359c <vTaskSwitchContext+0xa8>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003510:	4b23      	ldr	r3, [pc, #140]	; (80035a0 <vTaskSwitchContext+0xac>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800351e:	7afb      	ldrb	r3, [r7, #11]
 8003520:	f1c3 031f 	rsb	r3, r3, #31
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	491f      	ldr	r1, [pc, #124]	; (80035a4 <vTaskSwitchContext+0xb0>)
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10a      	bne.n	8003550 <vTaskSwitchContext+0x5c>
        __asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	607b      	str	r3, [r7, #4]
    }
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <vTaskSwitchContext+0x5a>
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <vTaskSwitchContext+0xb0>)
 800355c:	4413      	add	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	3308      	adds	r3, #8
 8003572:	429a      	cmp	r2, r3
 8003574:	d104      	bne.n	8003580 <vTaskSwitchContext+0x8c>
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	4a08      	ldr	r2, [pc, #32]	; (80035a8 <vTaskSwitchContext+0xb4>)
 8003588:	6013      	str	r3, [r2, #0]
}
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000198 	.word	0x20000198
 800359c:	20000184 	.word	0x20000184
 80035a0:	20000178 	.word	0x20000178
 80035a4:	2000009c 	.word	0x2000009c
 80035a8:	20000098 	.word	0x20000098

080035ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	60fb      	str	r3, [r7, #12]
    }
 80035ce:	bf00      	nop
 80035d0:	e7fe      	b.n	80035d0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035d2:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <vTaskPlaceOnEventList+0x44>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3318      	adds	r3, #24
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff f815 	bl	800260a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035e0:	2101      	movs	r1, #1
 80035e2:	6838      	ldr	r0, [r7, #0]
 80035e4:	f000 fa7a 	bl	8003adc <prvAddCurrentTaskToDelayedList>
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000098 	.word	0x20000098

080035f4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	613b      	str	r3, [r7, #16]
    }
 8003618:	bf00      	nop
 800361a:	e7fe      	b.n	800361a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	4b16      	ldr	r3, [pc, #88]	; (800367c <vTaskPlaceOnEventListRestricted+0x88>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	61da      	str	r2, [r3, #28]
 800362a:	4b14      	ldr	r3, [pc, #80]	; (800367c <vTaskPlaceOnEventListRestricted+0x88>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	6892      	ldr	r2, [r2, #8]
 8003632:	621a      	str	r2, [r3, #32]
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <vTaskPlaceOnEventListRestricted+0x88>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	3218      	adds	r2, #24
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	4b0e      	ldr	r3, [pc, #56]	; (800367c <vTaskPlaceOnEventListRestricted+0x88>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f103 0218 	add.w	r2, r3, #24
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	609a      	str	r2, [r3, #8]
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <vTaskPlaceOnEventListRestricted+0x88>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003664:	f04f 33ff 	mov.w	r3, #4294967295
 8003668:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	68b8      	ldr	r0, [r7, #8]
 800366e:	f000 fa35 	bl	8003adc <prvAddCurrentTaskToDelayedList>
    }
 8003672:	bf00      	nop
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000098 	.word	0x20000098

08003680 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003680:	b480      	push	{r7}
 8003682:	b08b      	sub	sp, #44	; 0x2c
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10a      	bne.n	80036ac <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	60fb      	str	r3, [r7, #12]
    }
 80036a8:	bf00      	nop
 80036aa:	e7fe      	b.n	80036aa <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	6a3a      	ldr	r2, [r7, #32]
 80036b8:	6a12      	ldr	r2, [r2, #32]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	6a3a      	ldr	r2, [r7, #32]
 80036c2:	69d2      	ldr	r2, [r2, #28]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	3318      	adds	r3, #24
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d103      	bne.n	80036da <xTaskRemoveFromEventList+0x5a>
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	6a1a      	ldr	r2, [r3, #32]
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	2200      	movs	r2, #0
 80036de:	629a      	str	r2, [r3, #40]	; 0x28
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	1e5a      	subs	r2, r3, #1
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ea:	4b4a      	ldr	r3, [pc, #296]	; (8003814 <xTaskRemoveFromEventList+0x194>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d15e      	bne.n	80037b0 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	6a3a      	ldr	r2, [r7, #32]
 80036fe:	68d2      	ldr	r2, [r2, #12]
 8003700:	609a      	str	r2, [r3, #8]
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	6a3a      	ldr	r2, [r7, #32]
 8003708:	6892      	ldr	r2, [r2, #8]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	3304      	adds	r3, #4
 8003714:	429a      	cmp	r2, r3
 8003716:	d103      	bne.n	8003720 <xTaskRemoveFromEventList+0xa0>
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	605a      	str	r2, [r3, #4]
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	2200      	movs	r2, #0
 8003724:	615a      	str	r2, [r3, #20]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	1e5a      	subs	r2, r3, #1
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	2201      	movs	r2, #1
 8003736:	409a      	lsls	r2, r3
 8003738:	4b37      	ldr	r3, [pc, #220]	; (8003818 <xTaskRemoveFromEventList+0x198>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4313      	orrs	r3, r2
 800373e:	4a36      	ldr	r2, [pc, #216]	; (8003818 <xTaskRemoveFromEventList+0x198>)
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003746:	4935      	ldr	r1, [pc, #212]	; (800381c <xTaskRemoveFromEventList+0x19c>)
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	3304      	adds	r3, #4
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	609a      	str	r2, [r3, #8]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	6a3a      	ldr	r2, [r7, #32]
 800376c:	3204      	adds	r2, #4
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	1d1a      	adds	r2, r3, #4
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4a25      	ldr	r2, [pc, #148]	; (800381c <xTaskRemoveFromEventList+0x19c>)
 8003786:	441a      	add	r2, r3
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	615a      	str	r2, [r3, #20]
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003790:	4922      	ldr	r1, [pc, #136]	; (800381c <xTaskRemoveFromEventList+0x19c>)
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	1c59      	adds	r1, r3, #1
 80037a0:	481e      	ldr	r0, [pc, #120]	; (800381c <xTaskRemoveFromEventList+0x19c>)
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4403      	add	r3, r0
 80037ac:	6019      	str	r1, [r3, #0]
 80037ae:	e01b      	b.n	80037e8 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037b0:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <xTaskRemoveFromEventList+0x1a0>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	61da      	str	r2, [r3, #28]
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	621a      	str	r2, [r3, #32]
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	6a3a      	ldr	r2, [r7, #32]
 80037ca:	3218      	adds	r2, #24
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	f103 0218 	add.w	r2, r3, #24
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	4a11      	ldr	r2, [pc, #68]	; (8003820 <xTaskRemoveFromEventList+0x1a0>)
 80037dc:	629a      	str	r2, [r3, #40]	; 0x28
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <xTaskRemoveFromEventList+0x1a0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	4a0e      	ldr	r2, [pc, #56]	; (8003820 <xTaskRemoveFromEventList+0x1a0>)
 80037e6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ec:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <xTaskRemoveFromEventList+0x1a4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d905      	bls.n	8003802 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80037f6:	2301      	movs	r3, #1
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <xTaskRemoveFromEventList+0x1a8>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	e001      	b.n	8003806 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003802:	2300      	movs	r3, #0
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003808:	4618      	mov	r0, r3
 800380a:	372c      	adds	r7, #44	; 0x2c
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	20000198 	.word	0x20000198
 8003818:	20000178 	.word	0x20000178
 800381c:	2000009c 	.word	0x2000009c
 8003820:	20000130 	.word	0x20000130
 8003824:	20000098 	.word	0x20000098
 8003828:	20000184 	.word	0x20000184

0800382c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003834:	4b06      	ldr	r3, [pc, #24]	; (8003850 <vTaskInternalSetTimeOutState+0x24>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <vTaskInternalSetTimeOutState+0x28>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	605a      	str	r2, [r3, #4]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	20000188 	.word	0x20000188
 8003854:	20000174 	.word	0x20000174

08003858 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	613b      	str	r3, [r7, #16]
    }
 800387a:	bf00      	nop
 800387c:	e7fe      	b.n	800387c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	60fb      	str	r3, [r7, #12]
    }
 8003896:	bf00      	nop
 8003898:	e7fe      	b.n	8003898 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800389a:	f000 fd55 	bl	8004348 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800389e:	4b1f      	ldr	r3, [pc, #124]	; (800391c <xTaskCheckForTimeOut+0xc4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b6:	d102      	bne.n	80038be <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	e026      	b.n	800390c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	4b17      	ldr	r3, [pc, #92]	; (8003920 <xTaskCheckForTimeOut+0xc8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d00a      	beq.n	80038e0 <xTaskCheckForTimeOut+0x88>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d305      	bcc.n	80038e0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80038d4:	2301      	movs	r3, #1
 80038d6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	e015      	b.n	800390c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d20b      	bcs.n	8003902 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	1ad2      	subs	r2, r2, r3
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff ff98 	bl	800382c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	e004      	b.n	800390c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003908:	2301      	movs	r3, #1
 800390a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800390c:	f000 fd4c 	bl	80043a8 <vPortExitCritical>

    return xReturn;
 8003910:	69fb      	ldr	r3, [r7, #28]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3720      	adds	r7, #32
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20000174 	.word	0x20000174
 8003920:	20000188 	.word	0x20000188

08003924 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003928:	4b03      	ldr	r3, [pc, #12]	; (8003938 <vTaskMissedYield+0x14>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]
}
 800392e:	bf00      	nop
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	20000184 	.word	0x20000184

0800393c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003944:	f000 f852 	bl	80039ec <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <prvIdleTask+0x28>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d9f9      	bls.n	8003944 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <prvIdleTask+0x2c>)
 8003952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003960:	e7f0      	b.n	8003944 <prvIdleTask+0x8>
 8003962:	bf00      	nop
 8003964:	2000009c 	.word	0x2000009c
 8003968:	e000ed04 	.word	0xe000ed04

0800396c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	e00c      	b.n	8003992 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4a12      	ldr	r2, [pc, #72]	; (80039cc <prvInitialiseTaskLists+0x60>)
 8003984:	4413      	add	r3, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fe12 	bl	80025b0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3301      	adds	r3, #1
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b04      	cmp	r3, #4
 8003996:	d9ef      	bls.n	8003978 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003998:	480d      	ldr	r0, [pc, #52]	; (80039d0 <prvInitialiseTaskLists+0x64>)
 800399a:	f7fe fe09 	bl	80025b0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800399e:	480d      	ldr	r0, [pc, #52]	; (80039d4 <prvInitialiseTaskLists+0x68>)
 80039a0:	f7fe fe06 	bl	80025b0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80039a4:	480c      	ldr	r0, [pc, #48]	; (80039d8 <prvInitialiseTaskLists+0x6c>)
 80039a6:	f7fe fe03 	bl	80025b0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80039aa:	480c      	ldr	r0, [pc, #48]	; (80039dc <prvInitialiseTaskLists+0x70>)
 80039ac:	f7fe fe00 	bl	80025b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80039b0:	480b      	ldr	r0, [pc, #44]	; (80039e0 <prvInitialiseTaskLists+0x74>)
 80039b2:	f7fe fdfd 	bl	80025b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <prvInitialiseTaskLists+0x78>)
 80039b8:	4a05      	ldr	r2, [pc, #20]	; (80039d0 <prvInitialiseTaskLists+0x64>)
 80039ba:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <prvInitialiseTaskLists+0x7c>)
 80039be:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <prvInitialiseTaskLists+0x68>)
 80039c0:	601a      	str	r2, [r3, #0]
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	2000009c 	.word	0x2000009c
 80039d0:	20000100 	.word	0x20000100
 80039d4:	20000114 	.word	0x20000114
 80039d8:	20000130 	.word	0x20000130
 80039dc:	20000144 	.word	0x20000144
 80039e0:	2000015c 	.word	0x2000015c
 80039e4:	20000128 	.word	0x20000128
 80039e8:	2000012c 	.word	0x2000012c

080039ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039f2:	e019      	b.n	8003a28 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80039f4:	f000 fca8 	bl	8004348 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039f8:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <prvCheckTasksWaitingTermination+0x50>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe fe39 	bl	800267c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003a0a:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <prvCheckTasksWaitingTermination+0x54>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <prvCheckTasksWaitingTermination+0x54>)
 8003a12:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <prvCheckTasksWaitingTermination+0x58>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <prvCheckTasksWaitingTermination+0x58>)
 8003a1c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003a1e:	f000 fcc3 	bl	80043a8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f810 	bl	8003a48 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <prvCheckTasksWaitingTermination+0x58>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e1      	bne.n	80039f4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000144 	.word	0x20000144
 8003a40:	20000170 	.word	0x20000170
 8003a44:	20000158 	.word	0x20000158

08003a48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fe39 	bl	80046cc <vPortFree>
            vPortFree( pxTCB );
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fe36 	bl	80046cc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <prvResetNextTaskUnblockTime+0x30>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d104      	bne.n	8003a80 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <prvResetNextTaskUnblockTime+0x34>)
 8003a78:	f04f 32ff 	mov.w	r2, #4294967295
 8003a7c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003a7e:	e005      	b.n	8003a8c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <prvResetNextTaskUnblockTime+0x30>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a04      	ldr	r2, [pc, #16]	; (8003a9c <prvResetNextTaskUnblockTime+0x34>)
 8003a8a:	6013      	str	r3, [r2, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000128 	.word	0x20000128
 8003a9c:	20000190 	.word	0x20000190

08003aa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <xTaskGetSchedulerState+0x34>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d102      	bne.n	8003ab4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	e008      	b.n	8003ac6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab4:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <xTaskGetSchedulerState+0x38>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003abc:	2302      	movs	r3, #2
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	e001      	b.n	8003ac6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003ac6:	687b      	ldr	r3, [r7, #4]
    }
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	2000017c 	.word	0x2000017c
 8003ad8:	20000198 	.word	0x20000198

08003adc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003ae6:	4b36      	ldr	r3, [pc, #216]	; (8003bc0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aec:	4b35      	ldr	r3, [pc, #212]	; (8003bc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3304      	adds	r3, #4
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fe fdc2 	bl	800267c <uxListRemove>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10b      	bne.n	8003b16 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003afe:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	2201      	movs	r2, #1
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	4b2e      	ldr	r3, [pc, #184]	; (8003bc8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4013      	ands	r3, r2
 8003b12:	4a2d      	ldr	r2, [pc, #180]	; (8003bc8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b14:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1c:	d124      	bne.n	8003b68 <prvAddCurrentTaskToDelayedList+0x8c>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d021      	beq.n	8003b68 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b24:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	609a      	str	r2, [r3, #8]
 8003b32:	4b24      	ldr	r3, [pc, #144]	; (8003bc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	6892      	ldr	r2, [r2, #8]
 8003b3a:	60da      	str	r2, [r3, #12]
 8003b3c:	4b21      	ldr	r3, [pc, #132]	; (8003bc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	3204      	adds	r2, #4
 8003b46:	605a      	str	r2, [r3, #4]
 8003b48:	4b1e      	ldr	r3, [pc, #120]	; (8003bc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	1d1a      	adds	r2, r3, #4
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	609a      	str	r2, [r3, #8]
 8003b52:	4b1c      	ldr	r3, [pc, #112]	; (8003bc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b58:	615a      	str	r2, [r3, #20]
 8003b5a:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	4a1a      	ldr	r2, [pc, #104]	; (8003bcc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b66:	e026      	b.n	8003bb6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b70:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d209      	bcs.n	8003b94 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b80:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	f7fe fd3c 	bl	800260a <vListInsert>
}
 8003b92:	e010      	b.n	8003bb6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b94:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	f7fe fd32 	bl	800260a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d202      	bcs.n	8003bb6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003bb0:	4a09      	ldr	r2, [pc, #36]	; (8003bd8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6013      	str	r3, [r2, #0]
}
 8003bb6:	bf00      	nop
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000174 	.word	0x20000174
 8003bc4:	20000098 	.word	0x20000098
 8003bc8:	20000178 	.word	0x20000178
 8003bcc:	2000015c 	.word	0x2000015c
 8003bd0:	2000012c 	.word	0x2000012c
 8003bd4:	20000128 	.word	0x20000128
 8003bd8:	20000190 	.word	0x20000190

08003bdc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003be6:	f000 fa47 	bl	8004078 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003bea:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <xTimerCreateTimerTask+0x54>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00b      	beq.n	8003c0a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003bf2:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <xTimerCreateTimerTask+0x58>)
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c00:	490d      	ldr	r1, [pc, #52]	; (8003c38 <xTimerCreateTimerTask+0x5c>)
 8003c02:	480e      	ldr	r0, [pc, #56]	; (8003c3c <xTimerCreateTimerTask+0x60>)
 8003c04:	f7ff f856 	bl	8002cb4 <xTaskCreate>
 8003c08:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10a      	bne.n	8003c26 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	603b      	str	r3, [r7, #0]
    }
 8003c22:	bf00      	nop
 8003c24:	e7fe      	b.n	8003c24 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003c26:	687b      	ldr	r3, [r7, #4]
    }
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	200001cc 	.word	0x200001cc
 8003c34:	200001d0 	.word	0x200001d0
 8003c38:	08005348 	.word	0x08005348
 8003c3c:	08003ce5 	.word	0x08003ce5

08003c40 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003c4c:	e008      	b.n	8003c60 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	4413      	add	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	699a      	ldr	r2, [r3, #24]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	18d1      	adds	r1, r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f8dd 	bl	8003e2c <prvInsertTimerInActiveList>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1ea      	bne.n	8003c4e <prvReloadTimer+0xe>
        }
    }
 8003c78:	bf00      	nop
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c8e:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <prvProcessExpiredTimer+0x5c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fe fced 	bl	800267c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f7ff ffc3 	bl	8003c40 <prvReloadTimer>
 8003cba:	e008      	b.n	8003cce <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	4798      	blx	r3
    }
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	200001c4 	.word	0x200001c4

08003ce4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cec:	f107 0308 	add.w	r3, r7, #8
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 f857 	bl	8003da4 <prvGetNextExpireTime>
 8003cf6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f803 	bl	8003d08 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d02:	f000 f8d5 	bl	8003eb0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d06:	e7f1      	b.n	8003cec <prvTimerTask+0x8>

08003d08 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d12:	f7ff f9bf 	bl	8003094 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d16:	f107 0308 	add.w	r3, r7, #8
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f866 	bl	8003dec <prvSampleTimeNow>
 8003d20:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d130      	bne.n	8003d8a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <prvProcessTimerOrBlockTask+0x3c>
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d806      	bhi.n	8003d44 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d36:	f7ff f9bb 	bl	80030b0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ffa1 	bl	8003c84 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d42:	e024      	b.n	8003d8e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d4a:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <prvProcessTimerOrBlockTask+0x90>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <prvProcessTimerOrBlockTask+0x50>
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <prvProcessTimerOrBlockTask+0x52>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <prvProcessTimerOrBlockTask+0x94>)
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f7fe ff6f 	bl	8002c4c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003d6e:	f7ff f99f 	bl	80030b0 <xTaskResumeAll>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <prvProcessTimerOrBlockTask+0x98>)
 8003d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	f3bf 8f6f 	isb	sy
    }
 8003d88:	e001      	b.n	8003d8e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003d8a:	f7ff f991 	bl	80030b0 <xTaskResumeAll>
    }
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	200001c8 	.word	0x200001c8
 8003d9c:	200001cc 	.word	0x200001cc
 8003da0:	e000ed04 	.word	0xe000ed04

08003da4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <prvGetNextExpireTime+0x44>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <prvGetNextExpireTime+0x16>
 8003db6:	2201      	movs	r2, #1
 8003db8:	e000      	b.n	8003dbc <prvGetNextExpireTime+0x18>
 8003dba:	2200      	movs	r2, #0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dc8:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <prvGetNextExpireTime+0x44>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	e001      	b.n	8003dd8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
    }
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	200001c4 	.word	0x200001c4

08003dec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003df4:	f7ff fa58 	bl	80032a8 <xTaskGetTickCount>
 8003df8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <prvSampleTimeNow+0x3c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d205      	bcs.n	8003e10 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e04:	f000 f912 	bl	800402c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	e002      	b.n	8003e16 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e16:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <prvSampleTimeNow+0x3c>)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
    }
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	200001d4 	.word	0x200001d4

08003e2c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d812      	bhi.n	8003e78 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	1ad2      	subs	r2, r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d302      	bcc.n	8003e66 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e60:	2301      	movs	r3, #1
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	e01b      	b.n	8003e9e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e66:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <prvInsertTimerInActiveList+0x7c>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f7fe fbca 	bl	800260a <vListInsert>
 8003e76:	e012      	b.n	8003e9e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d206      	bcs.n	8003e8e <prvInsertTimerInActiveList+0x62>
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d302      	bcc.n	8003e8e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e007      	b.n	8003e9e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e8e:	4b07      	ldr	r3, [pc, #28]	; (8003eac <prvInsertTimerInActiveList+0x80>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3304      	adds	r3, #4
 8003e96:	4619      	mov	r1, r3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	f7fe fbb6 	bl	800260a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003e9e:	697b      	ldr	r3, [r7, #20]
    }
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	200001c8 	.word	0x200001c8
 8003eac:	200001c4 	.word	0x200001c4

08003eb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eb6:	e0a6      	b.n	8004006 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f2c0 80a2 	blt.w	8004004 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d004      	beq.n	8003ed6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe fbd3 	bl	800267c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff ff87 	bl	8003dec <prvSampleTimeNow>
 8003ede:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	f200 808e 	bhi.w	8004006 <prvProcessReceivedCommands+0x156>
 8003eea:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <prvProcessReceivedCommands+0x40>)
 8003eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef0:	08003f15 	.word	0x08003f15
 8003ef4:	08003f15 	.word	0x08003f15
 8003ef8:	08003f7d 	.word	0x08003f7d
 8003efc:	08003f91 	.word	0x08003f91
 8003f00:	08003fdb 	.word	0x08003fdb
 8003f04:	08003f15 	.word	0x08003f15
 8003f08:	08003f15 	.word	0x08003f15
 8003f0c:	08003f7d 	.word	0x08003f7d
 8003f10:	08003f91 	.word	0x08003f91
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	18d1      	adds	r1, r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	69f8      	ldr	r0, [r7, #28]
 8003f34:	f7ff ff7a 	bl	8003e2c <prvInsertTimerInActiveList>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d063      	beq.n	8004006 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d009      	beq.n	8003f60 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	4413      	add	r3, r2
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4619      	mov	r1, r3
 8003f58:	69f8      	ldr	r0, [r7, #28]
 8003f5a:	f7ff fe71 	bl	8003c40 <prvReloadTimer>
 8003f5e:	e008      	b.n	8003f72 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f66:	f023 0301 	bic.w	r3, r3, #1
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	69f8      	ldr	r0, [r7, #28]
 8003f78:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003f7a:	e044      	b.n	8004006 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f82:	f023 0301 	bic.w	r3, r3, #1
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003f8e:	e03a      	b.n	8004006 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	617b      	str	r3, [r7, #20]
    }
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	18d1      	adds	r1, r2, r3
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	69f8      	ldr	r0, [r7, #28]
 8003fd4:	f7ff ff2a 	bl	8003e2c <prvInsertTimerInActiveList>
                        break;
 8003fd8:	e015      	b.n	8004006 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d103      	bne.n	8003ff0 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003fe8:	69f8      	ldr	r0, [r7, #28]
 8003fea:	f000 fb6f 	bl	80046cc <vPortFree>
 8003fee:	e00a      	b.n	8004006 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ff6:	f023 0301 	bic.w	r3, r3, #1
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004002:	e000      	b.n	8004006 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004004:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <prvProcessReceivedCommands+0x178>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f107 0108 	add.w	r1, r7, #8
 800400e:	2200      	movs	r2, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe fc5f 	bl	80028d4 <xQueueReceive>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	f47f af4d 	bne.w	8003eb8 <prvProcessReceivedCommands+0x8>
        }
    }
 800401e:	bf00      	nop
 8004020:	bf00      	nop
 8004022:	3720      	adds	r7, #32
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	200001cc 	.word	0x200001cc

0800402c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004032:	e009      	b.n	8004048 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004034:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <prvSwitchTimerLists+0x44>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800403e:	f04f 31ff 	mov.w	r1, #4294967295
 8004042:	6838      	ldr	r0, [r7, #0]
 8004044:	f7ff fe1e 	bl	8003c84 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004048:	4b09      	ldr	r3, [pc, #36]	; (8004070 <prvSwitchTimerLists+0x44>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004052:	4b07      	ldr	r3, [pc, #28]	; (8004070 <prvSwitchTimerLists+0x44>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <prvSwitchTimerLists+0x48>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a04      	ldr	r2, [pc, #16]	; (8004070 <prvSwitchTimerLists+0x44>)
 800405e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004060:	4a04      	ldr	r2, [pc, #16]	; (8004074 <prvSwitchTimerLists+0x48>)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6013      	str	r3, [r2, #0]
    }
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200001c4 	.word	0x200001c4
 8004074:	200001c8 	.word	0x200001c8

08004078 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800407c:	f000 f964 	bl	8004348 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004080:	4b12      	ldr	r3, [pc, #72]	; (80040cc <prvCheckForValidListAndQueue+0x54>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d11d      	bne.n	80040c4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004088:	4811      	ldr	r0, [pc, #68]	; (80040d0 <prvCheckForValidListAndQueue+0x58>)
 800408a:	f7fe fa91 	bl	80025b0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800408e:	4811      	ldr	r0, [pc, #68]	; (80040d4 <prvCheckForValidListAndQueue+0x5c>)
 8004090:	f7fe fa8e 	bl	80025b0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004094:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <prvCheckForValidListAndQueue+0x60>)
 8004096:	4a0e      	ldr	r2, [pc, #56]	; (80040d0 <prvCheckForValidListAndQueue+0x58>)
 8004098:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800409a:	4b10      	ldr	r3, [pc, #64]	; (80040dc <prvCheckForValidListAndQueue+0x64>)
 800409c:	4a0d      	ldr	r2, [pc, #52]	; (80040d4 <prvCheckForValidListAndQueue+0x5c>)
 800409e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80040a0:	2200      	movs	r2, #0
 80040a2:	210c      	movs	r1, #12
 80040a4:	200a      	movs	r0, #10
 80040a6:	f7fe fba3 	bl	80027f0 <xQueueGenericCreate>
 80040aa:	4603      	mov	r3, r0
 80040ac:	4a07      	ldr	r2, [pc, #28]	; (80040cc <prvCheckForValidListAndQueue+0x54>)
 80040ae:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <prvCheckForValidListAndQueue+0x54>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040b8:	4b04      	ldr	r3, [pc, #16]	; (80040cc <prvCheckForValidListAndQueue+0x54>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4908      	ldr	r1, [pc, #32]	; (80040e0 <prvCheckForValidListAndQueue+0x68>)
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe fd76 	bl	8002bb0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80040c4:	f000 f970 	bl	80043a8 <vPortExitCritical>
    }
 80040c8:	bf00      	nop
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	200001cc 	.word	0x200001cc
 80040d0:	2000019c 	.word	0x2000019c
 80040d4:	200001b0 	.word	0x200001b0
 80040d8:	200001c4 	.word	0x200001c4
 80040dc:	200001c8 	.word	0x200001c8
 80040e0:	08005350 	.word	0x08005350

080040e4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3b04      	subs	r3, #4
 80040f4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3b04      	subs	r3, #4
 8004102:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f023 0201 	bic.w	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3b04      	subs	r3, #4
 8004112:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004114:	4a0c      	ldr	r2, [pc, #48]	; (8004148 <pxPortInitialiseStack+0x64>)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3b14      	subs	r3, #20
 800411e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3b04      	subs	r3, #4
 800412a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f06f 0202 	mvn.w	r2, #2
 8004132:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3b20      	subs	r3, #32
 8004138:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800413a:	68fb      	ldr	r3, [r7, #12]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	0800414d 	.word	0x0800414d

0800414c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <prvTaskExitError+0x54>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415e:	d00a      	beq.n	8004176 <prvTaskExitError+0x2a>
        __asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	60fb      	str	r3, [r7, #12]
    }
 8004172:	bf00      	nop
 8004174:	e7fe      	b.n	8004174 <prvTaskExitError+0x28>
        __asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	60bb      	str	r3, [r7, #8]
    }
 8004188:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800418a:	bf00      	nop
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0fc      	beq.n	800418c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004192:	bf00      	nop
 8004194:	bf00      	nop
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	20000010 	.word	0x20000010
	...

080041b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80041b0:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <pxCurrentTCBConst2>)
 80041b2:	6819      	ldr	r1, [r3, #0]
 80041b4:	6808      	ldr	r0, [r1, #0]
 80041b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ba:	f380 8809 	msr	PSP, r0
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f04f 0000 	mov.w	r0, #0
 80041c6:	f380 8811 	msr	BASEPRI, r0
 80041ca:	4770      	bx	lr
 80041cc:	f3af 8000 	nop.w

080041d0 <pxCurrentTCBConst2>:
 80041d0:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop

080041d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80041d8:	4808      	ldr	r0, [pc, #32]	; (80041fc <prvPortStartFirstTask+0x24>)
 80041da:	6800      	ldr	r0, [r0, #0]
 80041dc:	6800      	ldr	r0, [r0, #0]
 80041de:	f380 8808 	msr	MSP, r0
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f380 8814 	msr	CONTROL, r0
 80041ea:	b662      	cpsie	i
 80041ec:	b661      	cpsie	f
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	df00      	svc	0
 80041f8:	bf00      	nop
 80041fa:	0000      	.short	0x0000
 80041fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop

08004204 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800420a:	4b46      	ldr	r3, [pc, #280]	; (8004324 <xPortStartScheduler+0x120>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a46      	ldr	r2, [pc, #280]	; (8004328 <xPortStartScheduler+0x124>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d10a      	bne.n	800422a <xPortStartScheduler+0x26>
        __asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	613b      	str	r3, [r7, #16]
    }
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800422a:	4b3e      	ldr	r3, [pc, #248]	; (8004324 <xPortStartScheduler+0x120>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a3f      	ldr	r2, [pc, #252]	; (800432c <xPortStartScheduler+0x128>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d10a      	bne.n	800424a <xPortStartScheduler+0x46>
        __asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	60fb      	str	r3, [r7, #12]
    }
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800424a:	4b39      	ldr	r3, [pc, #228]	; (8004330 <xPortStartScheduler+0x12c>)
 800424c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	22ff      	movs	r2, #255	; 0xff
 800425a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800426c:	b2da      	uxtb	r2, r3
 800426e:	4b31      	ldr	r3, [pc, #196]	; (8004334 <xPortStartScheduler+0x130>)
 8004270:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004272:	4b31      	ldr	r3, [pc, #196]	; (8004338 <xPortStartScheduler+0x134>)
 8004274:	2207      	movs	r2, #7
 8004276:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004278:	e009      	b.n	800428e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800427a:	4b2f      	ldr	r3, [pc, #188]	; (8004338 <xPortStartScheduler+0x134>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3b01      	subs	r3, #1
 8004280:	4a2d      	ldr	r2, [pc, #180]	; (8004338 <xPortStartScheduler+0x134>)
 8004282:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	b2db      	uxtb	r3, r3
 800428c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	2b80      	cmp	r3, #128	; 0x80
 8004298:	d0ef      	beq.n	800427a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800429a:	4b27      	ldr	r3, [pc, #156]	; (8004338 <xPortStartScheduler+0x134>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f1c3 0307 	rsb	r3, r3, #7
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d00a      	beq.n	80042bc <xPortStartScheduler+0xb8>
        __asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	60bb      	str	r3, [r7, #8]
    }
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042bc:	4b1e      	ldr	r3, [pc, #120]	; (8004338 <xPortStartScheduler+0x134>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	4a1d      	ldr	r2, [pc, #116]	; (8004338 <xPortStartScheduler+0x134>)
 80042c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042c6:	4b1c      	ldr	r3, [pc, #112]	; (8004338 <xPortStartScheduler+0x134>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042ce:	4a1a      	ldr	r2, [pc, #104]	; (8004338 <xPortStartScheduler+0x134>)
 80042d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80042da:	4b18      	ldr	r3, [pc, #96]	; (800433c <xPortStartScheduler+0x138>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a17      	ldr	r2, [pc, #92]	; (800433c <xPortStartScheduler+0x138>)
 80042e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80042e6:	4b15      	ldr	r3, [pc, #84]	; (800433c <xPortStartScheduler+0x138>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a14      	ldr	r2, [pc, #80]	; (800433c <xPortStartScheduler+0x138>)
 80042ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80042f2:	f000 f8db 	bl	80044ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80042f6:	4b12      	ldr	r3, [pc, #72]	; (8004340 <xPortStartScheduler+0x13c>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80042fc:	f000 f8fa 	bl	80044f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004300:	4b10      	ldr	r3, [pc, #64]	; (8004344 <xPortStartScheduler+0x140>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a0f      	ldr	r2, [pc, #60]	; (8004344 <xPortStartScheduler+0x140>)
 8004306:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800430a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800430c:	f7ff ff64 	bl	80041d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004310:	f7ff f8f0 	bl	80034f4 <vTaskSwitchContext>
    prvTaskExitError();
 8004314:	f7ff ff1a 	bl	800414c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	e000ed00 	.word	0xe000ed00
 8004328:	410fc271 	.word	0x410fc271
 800432c:	410fc270 	.word	0x410fc270
 8004330:	e000e400 	.word	0xe000e400
 8004334:	200001d8 	.word	0x200001d8
 8004338:	200001dc 	.word	0x200001dc
 800433c:	e000ed20 	.word	0xe000ed20
 8004340:	20000010 	.word	0x20000010
 8004344:	e000ef34 	.word	0xe000ef34

08004348 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
        __asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	607b      	str	r3, [r7, #4]
    }
 8004360:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004362:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <vPortEnterCritical+0x58>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3301      	adds	r3, #1
 8004368:	4a0d      	ldr	r2, [pc, #52]	; (80043a0 <vPortEnterCritical+0x58>)
 800436a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <vPortEnterCritical+0x58>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d10f      	bne.n	8004394 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <vPortEnterCritical+0x5c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <vPortEnterCritical+0x4c>
        __asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	603b      	str	r3, [r7, #0]
    }
 8004390:	bf00      	nop
 8004392:	e7fe      	b.n	8004392 <vPortEnterCritical+0x4a>
    }
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	20000010 	.word	0x20000010
 80043a4:	e000ed04 	.word	0xe000ed04

080043a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80043ae:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <vPortExitCritical+0x50>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10a      	bne.n	80043cc <vPortExitCritical+0x24>
        __asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	607b      	str	r3, [r7, #4]
    }
 80043c8:	bf00      	nop
 80043ca:	e7fe      	b.n	80043ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <vPortExitCritical+0x50>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <vPortExitCritical+0x50>)
 80043d4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80043d6:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <vPortExitCritical+0x50>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d105      	bne.n	80043ea <vPortExitCritical+0x42>
 80043de:	2300      	movs	r3, #0
 80043e0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80043e8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000010 	.word	0x20000010
 80043fc:	00000000 	.word	0x00000000

08004400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004400:	f3ef 8009 	mrs	r0, PSP
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	4b15      	ldr	r3, [pc, #84]	; (8004460 <pxCurrentTCBConst>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	f01e 0f10 	tst.w	lr, #16
 8004410:	bf08      	it	eq
 8004412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441a:	6010      	str	r0, [r2, #0]
 800441c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004424:	f380 8811 	msr	BASEPRI, r0
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f7ff f860 	bl	80034f4 <vTaskSwitchContext>
 8004434:	f04f 0000 	mov.w	r0, #0
 8004438:	f380 8811 	msr	BASEPRI, r0
 800443c:	bc09      	pop	{r0, r3}
 800443e:	6819      	ldr	r1, [r3, #0]
 8004440:	6808      	ldr	r0, [r1, #0]
 8004442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004446:	f01e 0f10 	tst.w	lr, #16
 800444a:	bf08      	it	eq
 800444c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004450:	f380 8809 	msr	PSP, r0
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	f3af 8000 	nop.w

08004460 <pxCurrentTCBConst>:
 8004460:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop

08004468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
        __asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	607b      	str	r3, [r7, #4]
    }
 8004480:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004482:	f7fe ff21 	bl	80032c8 <xTaskIncrementTick>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <SysTick_Handler+0x40>)
 800448e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	2300      	movs	r3, #0
 8004496:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	f383 8811 	msr	BASEPRI, r3
    }
 800449e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	e000ed04 	.word	0xe000ed04

080044ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <vPortSetupTimerInterrupt+0x34>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <vPortSetupTimerInterrupt+0x38>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <vPortSetupTimerInterrupt+0x3c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <vPortSetupTimerInterrupt+0x40>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <vPortSetupTimerInterrupt+0x44>)
 80044ca:	3b01      	subs	r3, #1
 80044cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ce:	4b04      	ldr	r3, [pc, #16]	; (80044e0 <vPortSetupTimerInterrupt+0x34>)
 80044d0:	2207      	movs	r2, #7
 80044d2:	601a      	str	r2, [r3, #0]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	e000e010 	.word	0xe000e010
 80044e4:	e000e018 	.word	0xe000e018
 80044e8:	20000000 	.word	0x20000000
 80044ec:	10624dd3 	.word	0x10624dd3
 80044f0:	e000e014 	.word	0xe000e014

080044f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80044f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004504 <vPortEnableVFP+0x10>
 80044f8:	6801      	ldr	r1, [r0, #0]
 80044fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044fe:	6001      	str	r1, [r0, #0]
 8004500:	4770      	bx	lr
 8004502:	0000      	.short	0x0000
 8004504:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop

0800450c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08a      	sub	sp, #40	; 0x28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004514:	2300      	movs	r3, #0
 8004516:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004518:	f7fe fdbc 	bl	8003094 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800451c:	4b65      	ldr	r3, [pc, #404]	; (80046b4 <pvPortMalloc+0x1a8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004524:	f000 f934 	bl	8004790 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004528:	4b63      	ldr	r3, [pc, #396]	; (80046b8 <pvPortMalloc+0x1ac>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	f040 80a7 	bne.w	8004684 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d02d      	beq.n	8004598 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) > xWantedSize ) ) /* Overflow check */
 800453c:	2208      	movs	r2, #8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d227      	bcs.n	8004598 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004548:	2208      	movs	r2, #8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4413      	add	r3, r2
 800454e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	2b00      	cmp	r3, #0
 8004558:	d021      	beq.n	800459e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f023 0307 	bic.w	r3, r3, #7
 8004560:	3308      	adds	r3, #8
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	d214      	bcs.n	8004592 <pvPortMalloc+0x86>
                        > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f023 0307 	bic.w	r3, r3, #7
 800456e:	3308      	adds	r3, #8
 8004570:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	2b00      	cmp	r3, #0
 800457a:	d010      	beq.n	800459e <pvPortMalloc+0x92>
        __asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	617b      	str	r3, [r7, #20]
    }
 800458e:	bf00      	nop
 8004590:	e7fe      	b.n	8004590 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004596:	e002      	b.n	800459e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	607b      	str	r3, [r7, #4]
 800459c:	e000      	b.n	80045a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800459e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d06e      	beq.n	8004684 <pvPortMalloc+0x178>
 80045a6:	4b45      	ldr	r3, [pc, #276]	; (80046bc <pvPortMalloc+0x1b0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d869      	bhi.n	8004684 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80045b0:	4b43      	ldr	r3, [pc, #268]	; (80046c0 <pvPortMalloc+0x1b4>)
 80045b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80045b4:	4b42      	ldr	r3, [pc, #264]	; (80046c0 <pvPortMalloc+0x1b4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ba:	e004      	b.n	80045c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d903      	bls.n	80045d8 <pvPortMalloc+0xcc>
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1f1      	bne.n	80045bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80045d8:	4b36      	ldr	r3, [pc, #216]	; (80046b4 <pvPortMalloc+0x1a8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045de:	429a      	cmp	r2, r3
 80045e0:	d050      	beq.n	8004684 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2208      	movs	r2, #8
 80045e8:	4413      	add	r3, r2
 80045ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	1ad2      	subs	r2, r2, r3
 80045fc:	2308      	movs	r3, #8
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	429a      	cmp	r2, r3
 8004602:	d91f      	bls.n	8004644 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4413      	add	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <pvPortMalloc+0x120>
        __asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	613b      	str	r3, [r7, #16]
    }
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	1ad2      	subs	r2, r2, r3
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800463e:	69b8      	ldr	r0, [r7, #24]
 8004640:	f000 f908 	bl	8004854 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004644:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <pvPortMalloc+0x1b0>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	4a1b      	ldr	r2, [pc, #108]	; (80046bc <pvPortMalloc+0x1b0>)
 8004650:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004652:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <pvPortMalloc+0x1b0>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <pvPortMalloc+0x1b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d203      	bcs.n	8004666 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800465e:	4b17      	ldr	r3, [pc, #92]	; (80046bc <pvPortMalloc+0x1b0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <pvPortMalloc+0x1b8>)
 8004664:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <pvPortMalloc+0x1ac>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	431a      	orrs	r2, r3
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800467a:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <pvPortMalloc+0x1bc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3301      	adds	r3, #1
 8004680:	4a11      	ldr	r2, [pc, #68]	; (80046c8 <pvPortMalloc+0x1bc>)
 8004682:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004684:	f7fe fd14 	bl	80030b0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <pvPortMalloc+0x19c>
        __asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	60fb      	str	r3, [r7, #12]
    }
 80046a4:	bf00      	nop
 80046a6:	e7fe      	b.n	80046a6 <pvPortMalloc+0x19a>
    return pvReturn;
 80046a8:	69fb      	ldr	r3, [r7, #28]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3728      	adds	r7, #40	; 0x28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20012de8 	.word	0x20012de8
 80046b8:	20012dfc 	.word	0x20012dfc
 80046bc:	20012dec 	.word	0x20012dec
 80046c0:	20012de0 	.word	0x20012de0
 80046c4:	20012df0 	.word	0x20012df0
 80046c8:	20012df4 	.word	0x20012df4

080046cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d04d      	beq.n	800477a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80046de:	2308      	movs	r3, #8
 80046e0:	425b      	negs	r3, r3
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4413      	add	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	4b24      	ldr	r3, [pc, #144]	; (8004784 <vPortFree+0xb8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10a      	bne.n	8004710 <vPortFree+0x44>
        __asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	60fb      	str	r3, [r7, #12]
    }
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <vPortFree+0x62>
        __asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	60bb      	str	r3, [r7, #8]
    }
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	4b14      	ldr	r3, [pc, #80]	; (8004784 <vPortFree+0xb8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4013      	ands	r3, r2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01e      	beq.n	800477a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d11a      	bne.n	800477a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <vPortFree+0xb8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	43db      	mvns	r3, r3
 800474e:	401a      	ands	r2, r3
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004754:	f7fe fc9e 	bl	8003094 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <vPortFree+0xbc>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4413      	add	r3, r2
 8004762:	4a09      	ldr	r2, [pc, #36]	; (8004788 <vPortFree+0xbc>)
 8004764:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004766:	6938      	ldr	r0, [r7, #16]
 8004768:	f000 f874 	bl	8004854 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800476c:	4b07      	ldr	r3, [pc, #28]	; (800478c <vPortFree+0xc0>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	4a06      	ldr	r2, [pc, #24]	; (800478c <vPortFree+0xc0>)
 8004774:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004776:	f7fe fc9b 	bl	80030b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800477a:	bf00      	nop
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20012dfc 	.word	0x20012dfc
 8004788:	20012dec 	.word	0x20012dec
 800478c:	20012df8 	.word	0x20012df8

08004790 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004796:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800479a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800479c:	4b27      	ldr	r3, [pc, #156]	; (800483c <prvHeapInit+0xac>)
 800479e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00c      	beq.n	80047c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3307      	adds	r3, #7
 80047ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0307 	bic.w	r3, r3, #7
 80047b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	4a1f      	ldr	r2, [pc, #124]	; (800483c <prvHeapInit+0xac>)
 80047c0:	4413      	add	r3, r2
 80047c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047c8:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <prvHeapInit+0xb0>)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80047ce:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <prvHeapInit+0xb0>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	4413      	add	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80047dc:	2208      	movs	r2, #8
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0307 	bic.w	r3, r3, #7
 80047ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a15      	ldr	r2, [pc, #84]	; (8004844 <prvHeapInit+0xb4>)
 80047f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80047f2:	4b14      	ldr	r3, [pc, #80]	; (8004844 <prvHeapInit+0xb4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2200      	movs	r2, #0
 80047f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80047fa:	4b12      	ldr	r3, [pc, #72]	; (8004844 <prvHeapInit+0xb4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	1ad2      	subs	r2, r2, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004810:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <prvHeapInit+0xb4>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <prvHeapInit+0xb8>)
 800481e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4a09      	ldr	r2, [pc, #36]	; (800484c <prvHeapInit+0xbc>)
 8004826:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <prvHeapInit+0xc0>)
 800482a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800482e:	601a      	str	r2, [r3, #0]
}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	200001e0 	.word	0x200001e0
 8004840:	20012de0 	.word	0x20012de0
 8004844:	20012de8 	.word	0x20012de8
 8004848:	20012df0 	.word	0x20012df0
 800484c:	20012dec 	.word	0x20012dec
 8004850:	20012dfc 	.word	0x20012dfc

08004854 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800485c:	4b28      	ldr	r3, [pc, #160]	; (8004900 <prvInsertBlockIntoFreeList+0xac>)
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	e002      	b.n	8004868 <prvInsertBlockIntoFreeList+0x14>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d8f7      	bhi.n	8004862 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4413      	add	r3, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d108      	bne.n	8004896 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	441a      	add	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	441a      	add	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d118      	bne.n	80048dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4b15      	ldr	r3, [pc, #84]	; (8004904 <prvInsertBlockIntoFreeList+0xb0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d00d      	beq.n	80048d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	441a      	add	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	e008      	b.n	80048e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048d2:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <prvInsertBlockIntoFreeList+0xb0>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e003      	b.n	80048e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d002      	beq.n	80048f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80048f2:	bf00      	nop
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20012de0 	.word	0x20012de0
 8004904:	20012de8 	.word	0x20012de8

08004908 <main_app>:
static void blinkLed(void);
void printMsg(char *msg, ...);
static void hello_task(void *pvParameters);
static void led_task(void *pvParameters);
void main_app(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af02      	add	r7, sp, #8
	int8_t status; 
	uint32_t counter= 0;
 800490e:	2300      	movs	r3, #0
 8004910:	607b      	str	r3, [r7, #4]
	//led task
	status = xTaskCreate(led_task, "LED", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8004912:	2300      	movs	r3, #0
 8004914:	9301      	str	r3, [sp, #4]
 8004916:	2300      	movs	r3, #0
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	2282      	movs	r2, #130	; 0x82
 800491e:	4916      	ldr	r1, [pc, #88]	; (8004978 <main_app+0x70>)
 8004920:	4816      	ldr	r0, [pc, #88]	; (800497c <main_app+0x74>)
 8004922:	f7fe f9c7 	bl	8002cb4 <xTaskCreate>
 8004926:	4603      	mov	r3, r0
 8004928:	70fb      	strb	r3, [r7, #3]
	if (status == -1)
 800492a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d102      	bne.n	800493a <main_app+0x32>
		printMsg("error creating LED task task\n");
 8004934:	4812      	ldr	r0, [pc, #72]	; (8004980 <main_app+0x78>)
 8004936:	f000 f84f 	bl	80049d8 <printMsg>

	//hello task
	status = xTaskCreate(hello_task, "Hello", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 800493a:	2300      	movs	r3, #0
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	2300      	movs	r3, #0
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	2300      	movs	r3, #0
 8004944:	2282      	movs	r2, #130	; 0x82
 8004946:	490f      	ldr	r1, [pc, #60]	; (8004984 <main_app+0x7c>)
 8004948:	480f      	ldr	r0, [pc, #60]	; (8004988 <main_app+0x80>)
 800494a:	f7fe f9b3 	bl	8002cb4 <xTaskCreate>
 800494e:	4603      	mov	r3, r0
 8004950:	70fb      	strb	r3, [r7, #3]
		if (status == -1)
 8004952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495a:	d102      	bne.n	8004962 <main_app+0x5a>
			printMsg("error creating LED task task\n");
 800495c:	4808      	ldr	r0, [pc, #32]	; (8004980 <main_app+0x78>)
 800495e:	f000 f83b 	bl	80049d8 <printMsg>
	//should never return from here
	vTaskStartScheduler();	
 8004962:	f7fe fb45 	bl	8002ff0 <vTaskStartScheduler>

	while(1)
	{
		printMsg("Hello %d\r\n", counter++);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	4619      	mov	r1, r3
 800496e:	4807      	ldr	r0, [pc, #28]	; (800498c <main_app+0x84>)
 8004970:	f000 f832 	bl	80049d8 <printMsg>
 8004974:	e7f7      	b.n	8004966 <main_app+0x5e>
 8004976:	bf00      	nop
 8004978:	08005358 	.word	0x08005358
 800497c:	080049b9 	.word	0x080049b9
 8004980:	0800535c 	.word	0x0800535c
 8004984:	0800537c 	.word	0x0800537c
 8004988:	08004991 	.word	0x08004991
 800498c:	08005384 	.word	0x08005384

08004990 <hello_task>:
	}
}

static void hello_task(void *pvParameters)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
	uint32_t counter = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		printMsg("hello %d \r\n", counter++);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	60fa      	str	r2, [r7, #12]
 80049a2:	4619      	mov	r1, r3
 80049a4:	4803      	ldr	r0, [pc, #12]	; (80049b4 <hello_task+0x24>)
 80049a6:	f000 f817 	bl	80049d8 <printMsg>
		vTaskDelay(1000);
 80049aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049ae:	f7fe faeb 	bl	8002f88 <vTaskDelay>
		printMsg("hello %d \r\n", counter++);
 80049b2:	e7f3      	b.n	800499c <hello_task+0xc>
 80049b4:	08005390 	.word	0x08005390

080049b8 <led_task>:
	}
}

static void led_task(void *pvParameters)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	//setup

	while (1)
	{
		blinkLed();
 80049c0:	f000 f848 	bl	8004a54 <blinkLed>
		printMsg("led\r\n");
 80049c4:	4803      	ldr	r0, [pc, #12]	; (80049d4 <led_task+0x1c>)
 80049c6:	f000 f807 	bl	80049d8 <printMsg>
		vTaskDelay(500);
 80049ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049ce:	f7fe fadb 	bl	8002f88 <vTaskDelay>
		blinkLed();
 80049d2:	e7f5      	b.n	80049c0 <led_task+0x8>
 80049d4:	0800539c 	.word	0x0800539c

080049d8 <printMsg>:
	}
}

void printMsg(char *msg, ...)
{
 80049d8:	b40f      	push	{r0, r1, r2, r3}
 80049da:	b580      	push	{r7, lr}
 80049dc:	b090      	sub	sp, #64	; 0x40
 80049de:	af00      	add	r7, sp, #0
	char buff[50];
	va_list args;
	va_start(args, msg);
 80049e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80049e4:	607b      	str	r3, [r7, #4]
	vsprintf(buff, msg, args);
 80049e6:	f107 0308 	add.w	r3, r7, #8
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 f890 	bl	8004b14 <vsiprintf>

	for (int i = 0; i < strlen(buff); i++)
 80049f4:	2300      	movs	r3, #0
 80049f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f8:	e012      	b.n	8004a20 <printMsg+0x48>
	{
		USART2->DR = buff[i];
 80049fa:	f107 0208 	add.w	r2, r7, #8
 80049fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a00:	4413      	add	r3, r2
 8004a02:	781a      	ldrb	r2, [r3, #0]
 8004a04:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <printMsg+0x78>)
 8004a06:	605a      	str	r2, [r3, #4]
		blinkLed();
 8004a08:	f000 f824 	bl	8004a54 <blinkLed>
		while (!(USART2->SR & USART_SR_TXE))
 8004a0c:	bf00      	nop
 8004a0e:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <printMsg+0x78>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f9      	beq.n	8004a0e <printMsg+0x36>
	for (int i = 0; i < strlen(buff); i++)
 8004a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a20:	f107 0308 	add.w	r3, r7, #8
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fb fbf3 	bl	8000210 <strlen>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d8e3      	bhi.n	80049fa <printMsg+0x22>
			;
	}

	while (!(USART2->SR & USART_SR_TC))
 8004a32:	bf00      	nop
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <printMsg+0x78>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f9      	beq.n	8004a34 <printMsg+0x5c>
		;
}
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop
 8004a44:	3740      	adds	r7, #64	; 0x40
 8004a46:	46bd      	mov	sp, r7
 8004a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a4c:	b004      	add	sp, #16
 8004a4e:	4770      	bx	lr
 8004a50:	40004400 	.word	0x40004400

08004a54 <blinkLed>:

static void blinkLed(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8004a58:	2120      	movs	r1, #32
 8004a5a:	4802      	ldr	r0, [pc, #8]	; (8004a64 <blinkLed+0x10>)
 8004a5c:	f7fc fadd 	bl	800101a <HAL_GPIO_TogglePin>
}
 8004a60:	bf00      	nop
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40020000 	.word	0x40020000

08004a68 <__errno>:
 8004a68:	4b01      	ldr	r3, [pc, #4]	; (8004a70 <__errno+0x8>)
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000014 	.word	0x20000014

08004a74 <__libc_init_array>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	4d0d      	ldr	r5, [pc, #52]	; (8004aac <__libc_init_array+0x38>)
 8004a78:	4c0d      	ldr	r4, [pc, #52]	; (8004ab0 <__libc_init_array+0x3c>)
 8004a7a:	1b64      	subs	r4, r4, r5
 8004a7c:	10a4      	asrs	r4, r4, #2
 8004a7e:	2600      	movs	r6, #0
 8004a80:	42a6      	cmp	r6, r4
 8004a82:	d109      	bne.n	8004a98 <__libc_init_array+0x24>
 8004a84:	4d0b      	ldr	r5, [pc, #44]	; (8004ab4 <__libc_init_array+0x40>)
 8004a86:	4c0c      	ldr	r4, [pc, #48]	; (8004ab8 <__libc_init_array+0x44>)
 8004a88:	f000 fc4e 	bl	8005328 <_init>
 8004a8c:	1b64      	subs	r4, r4, r5
 8004a8e:	10a4      	asrs	r4, r4, #2
 8004a90:	2600      	movs	r6, #0
 8004a92:	42a6      	cmp	r6, r4
 8004a94:	d105      	bne.n	8004aa2 <__libc_init_array+0x2e>
 8004a96:	bd70      	pop	{r4, r5, r6, pc}
 8004a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9c:	4798      	blx	r3
 8004a9e:	3601      	adds	r6, #1
 8004aa0:	e7ee      	b.n	8004a80 <__libc_init_array+0xc>
 8004aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa6:	4798      	blx	r3
 8004aa8:	3601      	adds	r6, #1
 8004aaa:	e7f2      	b.n	8004a92 <__libc_init_array+0x1e>
 8004aac:	080053f8 	.word	0x080053f8
 8004ab0:	080053f8 	.word	0x080053f8
 8004ab4:	080053f8 	.word	0x080053f8
 8004ab8:	080053fc 	.word	0x080053fc

08004abc <memcpy>:
 8004abc:	440a      	add	r2, r1
 8004abe:	4291      	cmp	r1, r2
 8004ac0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ac4:	d100      	bne.n	8004ac8 <memcpy+0xc>
 8004ac6:	4770      	bx	lr
 8004ac8:	b510      	push	{r4, lr}
 8004aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ace:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ad2:	4291      	cmp	r1, r2
 8004ad4:	d1f9      	bne.n	8004aca <memcpy+0xe>
 8004ad6:	bd10      	pop	{r4, pc}

08004ad8 <memset>:
 8004ad8:	4402      	add	r2, r0
 8004ada:	4603      	mov	r3, r0
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d100      	bne.n	8004ae2 <memset+0xa>
 8004ae0:	4770      	bx	lr
 8004ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ae6:	e7f9      	b.n	8004adc <memset+0x4>

08004ae8 <_vsiprintf_r>:
 8004ae8:	b500      	push	{lr}
 8004aea:	b09b      	sub	sp, #108	; 0x6c
 8004aec:	9100      	str	r1, [sp, #0]
 8004aee:	9104      	str	r1, [sp, #16]
 8004af0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004af4:	9105      	str	r1, [sp, #20]
 8004af6:	9102      	str	r1, [sp, #8]
 8004af8:	4905      	ldr	r1, [pc, #20]	; (8004b10 <_vsiprintf_r+0x28>)
 8004afa:	9103      	str	r1, [sp, #12]
 8004afc:	4669      	mov	r1, sp
 8004afe:	f000 f86f 	bl	8004be0 <_svfiprintf_r>
 8004b02:	9b00      	ldr	r3, [sp, #0]
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]
 8004b08:	b01b      	add	sp, #108	; 0x6c
 8004b0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b0e:	bf00      	nop
 8004b10:	ffff0208 	.word	0xffff0208

08004b14 <vsiprintf>:
 8004b14:	4613      	mov	r3, r2
 8004b16:	460a      	mov	r2, r1
 8004b18:	4601      	mov	r1, r0
 8004b1a:	4802      	ldr	r0, [pc, #8]	; (8004b24 <vsiprintf+0x10>)
 8004b1c:	6800      	ldr	r0, [r0, #0]
 8004b1e:	f7ff bfe3 	b.w	8004ae8 <_vsiprintf_r>
 8004b22:	bf00      	nop
 8004b24:	20000014 	.word	0x20000014

08004b28 <__ssputs_r>:
 8004b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b2c:	688e      	ldr	r6, [r1, #8]
 8004b2e:	429e      	cmp	r6, r3
 8004b30:	4682      	mov	sl, r0
 8004b32:	460c      	mov	r4, r1
 8004b34:	4690      	mov	r8, r2
 8004b36:	461f      	mov	r7, r3
 8004b38:	d838      	bhi.n	8004bac <__ssputs_r+0x84>
 8004b3a:	898a      	ldrh	r2, [r1, #12]
 8004b3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b40:	d032      	beq.n	8004ba8 <__ssputs_r+0x80>
 8004b42:	6825      	ldr	r5, [r4, #0]
 8004b44:	6909      	ldr	r1, [r1, #16]
 8004b46:	eba5 0901 	sub.w	r9, r5, r1
 8004b4a:	6965      	ldr	r5, [r4, #20]
 8004b4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b54:	3301      	adds	r3, #1
 8004b56:	444b      	add	r3, r9
 8004b58:	106d      	asrs	r5, r5, #1
 8004b5a:	429d      	cmp	r5, r3
 8004b5c:	bf38      	it	cc
 8004b5e:	461d      	movcc	r5, r3
 8004b60:	0553      	lsls	r3, r2, #21
 8004b62:	d531      	bpl.n	8004bc8 <__ssputs_r+0xa0>
 8004b64:	4629      	mov	r1, r5
 8004b66:	f000 fb39 	bl	80051dc <_malloc_r>
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	b950      	cbnz	r0, 8004b84 <__ssputs_r+0x5c>
 8004b6e:	230c      	movs	r3, #12
 8004b70:	f8ca 3000 	str.w	r3, [sl]
 8004b74:	89a3      	ldrh	r3, [r4, #12]
 8004b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b7a:	81a3      	strh	r3, [r4, #12]
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b84:	6921      	ldr	r1, [r4, #16]
 8004b86:	464a      	mov	r2, r9
 8004b88:	f7ff ff98 	bl	8004abc <memcpy>
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b96:	81a3      	strh	r3, [r4, #12]
 8004b98:	6126      	str	r6, [r4, #16]
 8004b9a:	6165      	str	r5, [r4, #20]
 8004b9c:	444e      	add	r6, r9
 8004b9e:	eba5 0509 	sub.w	r5, r5, r9
 8004ba2:	6026      	str	r6, [r4, #0]
 8004ba4:	60a5      	str	r5, [r4, #8]
 8004ba6:	463e      	mov	r6, r7
 8004ba8:	42be      	cmp	r6, r7
 8004baa:	d900      	bls.n	8004bae <__ssputs_r+0x86>
 8004bac:	463e      	mov	r6, r7
 8004bae:	4632      	mov	r2, r6
 8004bb0:	6820      	ldr	r0, [r4, #0]
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	f000 faa8 	bl	8005108 <memmove>
 8004bb8:	68a3      	ldr	r3, [r4, #8]
 8004bba:	6822      	ldr	r2, [r4, #0]
 8004bbc:	1b9b      	subs	r3, r3, r6
 8004bbe:	4432      	add	r2, r6
 8004bc0:	60a3      	str	r3, [r4, #8]
 8004bc2:	6022      	str	r2, [r4, #0]
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	e7db      	b.n	8004b80 <__ssputs_r+0x58>
 8004bc8:	462a      	mov	r2, r5
 8004bca:	f000 fb61 	bl	8005290 <_realloc_r>
 8004bce:	4606      	mov	r6, r0
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d1e1      	bne.n	8004b98 <__ssputs_r+0x70>
 8004bd4:	6921      	ldr	r1, [r4, #16]
 8004bd6:	4650      	mov	r0, sl
 8004bd8:	f000 fab0 	bl	800513c <_free_r>
 8004bdc:	e7c7      	b.n	8004b6e <__ssputs_r+0x46>
	...

08004be0 <_svfiprintf_r>:
 8004be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be4:	4698      	mov	r8, r3
 8004be6:	898b      	ldrh	r3, [r1, #12]
 8004be8:	061b      	lsls	r3, r3, #24
 8004bea:	b09d      	sub	sp, #116	; 0x74
 8004bec:	4607      	mov	r7, r0
 8004bee:	460d      	mov	r5, r1
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	d50e      	bpl.n	8004c12 <_svfiprintf_r+0x32>
 8004bf4:	690b      	ldr	r3, [r1, #16]
 8004bf6:	b963      	cbnz	r3, 8004c12 <_svfiprintf_r+0x32>
 8004bf8:	2140      	movs	r1, #64	; 0x40
 8004bfa:	f000 faef 	bl	80051dc <_malloc_r>
 8004bfe:	6028      	str	r0, [r5, #0]
 8004c00:	6128      	str	r0, [r5, #16]
 8004c02:	b920      	cbnz	r0, 8004c0e <_svfiprintf_r+0x2e>
 8004c04:	230c      	movs	r3, #12
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0c:	e0d1      	b.n	8004db2 <_svfiprintf_r+0x1d2>
 8004c0e:	2340      	movs	r3, #64	; 0x40
 8004c10:	616b      	str	r3, [r5, #20]
 8004c12:	2300      	movs	r3, #0
 8004c14:	9309      	str	r3, [sp, #36]	; 0x24
 8004c16:	2320      	movs	r3, #32
 8004c18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c20:	2330      	movs	r3, #48	; 0x30
 8004c22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004dcc <_svfiprintf_r+0x1ec>
 8004c26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c2a:	f04f 0901 	mov.w	r9, #1
 8004c2e:	4623      	mov	r3, r4
 8004c30:	469a      	mov	sl, r3
 8004c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c36:	b10a      	cbz	r2, 8004c3c <_svfiprintf_r+0x5c>
 8004c38:	2a25      	cmp	r2, #37	; 0x25
 8004c3a:	d1f9      	bne.n	8004c30 <_svfiprintf_r+0x50>
 8004c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8004c40:	d00b      	beq.n	8004c5a <_svfiprintf_r+0x7a>
 8004c42:	465b      	mov	r3, fp
 8004c44:	4622      	mov	r2, r4
 8004c46:	4629      	mov	r1, r5
 8004c48:	4638      	mov	r0, r7
 8004c4a:	f7ff ff6d 	bl	8004b28 <__ssputs_r>
 8004c4e:	3001      	adds	r0, #1
 8004c50:	f000 80aa 	beq.w	8004da8 <_svfiprintf_r+0x1c8>
 8004c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c56:	445a      	add	r2, fp
 8004c58:	9209      	str	r2, [sp, #36]	; 0x24
 8004c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80a2 	beq.w	8004da8 <_svfiprintf_r+0x1c8>
 8004c64:	2300      	movs	r3, #0
 8004c66:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c6e:	f10a 0a01 	add.w	sl, sl, #1
 8004c72:	9304      	str	r3, [sp, #16]
 8004c74:	9307      	str	r3, [sp, #28]
 8004c76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c7a:	931a      	str	r3, [sp, #104]	; 0x68
 8004c7c:	4654      	mov	r4, sl
 8004c7e:	2205      	movs	r2, #5
 8004c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c84:	4851      	ldr	r0, [pc, #324]	; (8004dcc <_svfiprintf_r+0x1ec>)
 8004c86:	f7fb facb 	bl	8000220 <memchr>
 8004c8a:	9a04      	ldr	r2, [sp, #16]
 8004c8c:	b9d8      	cbnz	r0, 8004cc6 <_svfiprintf_r+0xe6>
 8004c8e:	06d0      	lsls	r0, r2, #27
 8004c90:	bf44      	itt	mi
 8004c92:	2320      	movmi	r3, #32
 8004c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c98:	0711      	lsls	r1, r2, #28
 8004c9a:	bf44      	itt	mi
 8004c9c:	232b      	movmi	r3, #43	; 0x2b
 8004c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ca8:	d015      	beq.n	8004cd6 <_svfiprintf_r+0xf6>
 8004caa:	9a07      	ldr	r2, [sp, #28]
 8004cac:	4654      	mov	r4, sl
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f04f 0c0a 	mov.w	ip, #10
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cba:	3b30      	subs	r3, #48	; 0x30
 8004cbc:	2b09      	cmp	r3, #9
 8004cbe:	d94e      	bls.n	8004d5e <_svfiprintf_r+0x17e>
 8004cc0:	b1b0      	cbz	r0, 8004cf0 <_svfiprintf_r+0x110>
 8004cc2:	9207      	str	r2, [sp, #28]
 8004cc4:	e014      	b.n	8004cf0 <_svfiprintf_r+0x110>
 8004cc6:	eba0 0308 	sub.w	r3, r0, r8
 8004cca:	fa09 f303 	lsl.w	r3, r9, r3
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	9304      	str	r3, [sp, #16]
 8004cd2:	46a2      	mov	sl, r4
 8004cd4:	e7d2      	b.n	8004c7c <_svfiprintf_r+0x9c>
 8004cd6:	9b03      	ldr	r3, [sp, #12]
 8004cd8:	1d19      	adds	r1, r3, #4
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	9103      	str	r1, [sp, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bfbb      	ittet	lt
 8004ce2:	425b      	neglt	r3, r3
 8004ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8004ce8:	9307      	strge	r3, [sp, #28]
 8004cea:	9307      	strlt	r3, [sp, #28]
 8004cec:	bfb8      	it	lt
 8004cee:	9204      	strlt	r2, [sp, #16]
 8004cf0:	7823      	ldrb	r3, [r4, #0]
 8004cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8004cf4:	d10c      	bne.n	8004d10 <_svfiprintf_r+0x130>
 8004cf6:	7863      	ldrb	r3, [r4, #1]
 8004cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cfa:	d135      	bne.n	8004d68 <_svfiprintf_r+0x188>
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	1d1a      	adds	r2, r3, #4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	9203      	str	r2, [sp, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bfb8      	it	lt
 8004d08:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d0c:	3402      	adds	r4, #2
 8004d0e:	9305      	str	r3, [sp, #20]
 8004d10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ddc <_svfiprintf_r+0x1fc>
 8004d14:	7821      	ldrb	r1, [r4, #0]
 8004d16:	2203      	movs	r2, #3
 8004d18:	4650      	mov	r0, sl
 8004d1a:	f7fb fa81 	bl	8000220 <memchr>
 8004d1e:	b140      	cbz	r0, 8004d32 <_svfiprintf_r+0x152>
 8004d20:	2340      	movs	r3, #64	; 0x40
 8004d22:	eba0 000a 	sub.w	r0, r0, sl
 8004d26:	fa03 f000 	lsl.w	r0, r3, r0
 8004d2a:	9b04      	ldr	r3, [sp, #16]
 8004d2c:	4303      	orrs	r3, r0
 8004d2e:	3401      	adds	r4, #1
 8004d30:	9304      	str	r3, [sp, #16]
 8004d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d36:	4826      	ldr	r0, [pc, #152]	; (8004dd0 <_svfiprintf_r+0x1f0>)
 8004d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d3c:	2206      	movs	r2, #6
 8004d3e:	f7fb fa6f 	bl	8000220 <memchr>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d038      	beq.n	8004db8 <_svfiprintf_r+0x1d8>
 8004d46:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <_svfiprintf_r+0x1f4>)
 8004d48:	bb1b      	cbnz	r3, 8004d92 <_svfiprintf_r+0x1b2>
 8004d4a:	9b03      	ldr	r3, [sp, #12]
 8004d4c:	3307      	adds	r3, #7
 8004d4e:	f023 0307 	bic.w	r3, r3, #7
 8004d52:	3308      	adds	r3, #8
 8004d54:	9303      	str	r3, [sp, #12]
 8004d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d58:	4433      	add	r3, r6
 8004d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d5c:	e767      	b.n	8004c2e <_svfiprintf_r+0x4e>
 8004d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d62:	460c      	mov	r4, r1
 8004d64:	2001      	movs	r0, #1
 8004d66:	e7a5      	b.n	8004cb4 <_svfiprintf_r+0xd4>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	3401      	adds	r4, #1
 8004d6c:	9305      	str	r3, [sp, #20]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	f04f 0c0a 	mov.w	ip, #10
 8004d74:	4620      	mov	r0, r4
 8004d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d7a:	3a30      	subs	r2, #48	; 0x30
 8004d7c:	2a09      	cmp	r2, #9
 8004d7e:	d903      	bls.n	8004d88 <_svfiprintf_r+0x1a8>
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0c5      	beq.n	8004d10 <_svfiprintf_r+0x130>
 8004d84:	9105      	str	r1, [sp, #20]
 8004d86:	e7c3      	b.n	8004d10 <_svfiprintf_r+0x130>
 8004d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e7f0      	b.n	8004d74 <_svfiprintf_r+0x194>
 8004d92:	ab03      	add	r3, sp, #12
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	462a      	mov	r2, r5
 8004d98:	4b0f      	ldr	r3, [pc, #60]	; (8004dd8 <_svfiprintf_r+0x1f8>)
 8004d9a:	a904      	add	r1, sp, #16
 8004d9c:	4638      	mov	r0, r7
 8004d9e:	f3af 8000 	nop.w
 8004da2:	1c42      	adds	r2, r0, #1
 8004da4:	4606      	mov	r6, r0
 8004da6:	d1d6      	bne.n	8004d56 <_svfiprintf_r+0x176>
 8004da8:	89ab      	ldrh	r3, [r5, #12]
 8004daa:	065b      	lsls	r3, r3, #25
 8004dac:	f53f af2c 	bmi.w	8004c08 <_svfiprintf_r+0x28>
 8004db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004db2:	b01d      	add	sp, #116	; 0x74
 8004db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db8:	ab03      	add	r3, sp, #12
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	462a      	mov	r2, r5
 8004dbe:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <_svfiprintf_r+0x1f8>)
 8004dc0:	a904      	add	r1, sp, #16
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	f000 f87a 	bl	8004ebc <_printf_i>
 8004dc8:	e7eb      	b.n	8004da2 <_svfiprintf_r+0x1c2>
 8004dca:	bf00      	nop
 8004dcc:	080053bc 	.word	0x080053bc
 8004dd0:	080053c6 	.word	0x080053c6
 8004dd4:	00000000 	.word	0x00000000
 8004dd8:	08004b29 	.word	0x08004b29
 8004ddc:	080053c2 	.word	0x080053c2

08004de0 <_printf_common>:
 8004de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	4616      	mov	r6, r2
 8004de6:	4699      	mov	r9, r3
 8004de8:	688a      	ldr	r2, [r1, #8]
 8004dea:	690b      	ldr	r3, [r1, #16]
 8004dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004df0:	4293      	cmp	r3, r2
 8004df2:	bfb8      	it	lt
 8004df4:	4613      	movlt	r3, r2
 8004df6:	6033      	str	r3, [r6, #0]
 8004df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dfc:	4607      	mov	r7, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	b10a      	cbz	r2, 8004e06 <_printf_common+0x26>
 8004e02:	3301      	adds	r3, #1
 8004e04:	6033      	str	r3, [r6, #0]
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	0699      	lsls	r1, r3, #26
 8004e0a:	bf42      	ittt	mi
 8004e0c:	6833      	ldrmi	r3, [r6, #0]
 8004e0e:	3302      	addmi	r3, #2
 8004e10:	6033      	strmi	r3, [r6, #0]
 8004e12:	6825      	ldr	r5, [r4, #0]
 8004e14:	f015 0506 	ands.w	r5, r5, #6
 8004e18:	d106      	bne.n	8004e28 <_printf_common+0x48>
 8004e1a:	f104 0a19 	add.w	sl, r4, #25
 8004e1e:	68e3      	ldr	r3, [r4, #12]
 8004e20:	6832      	ldr	r2, [r6, #0]
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	42ab      	cmp	r3, r5
 8004e26:	dc26      	bgt.n	8004e76 <_printf_common+0x96>
 8004e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e2c:	1e13      	subs	r3, r2, #0
 8004e2e:	6822      	ldr	r2, [r4, #0]
 8004e30:	bf18      	it	ne
 8004e32:	2301      	movne	r3, #1
 8004e34:	0692      	lsls	r2, r2, #26
 8004e36:	d42b      	bmi.n	8004e90 <_printf_common+0xb0>
 8004e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	4638      	mov	r0, r7
 8004e40:	47c0      	blx	r8
 8004e42:	3001      	adds	r0, #1
 8004e44:	d01e      	beq.n	8004e84 <_printf_common+0xa4>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	68e5      	ldr	r5, [r4, #12]
 8004e4a:	6832      	ldr	r2, [r6, #0]
 8004e4c:	f003 0306 	and.w	r3, r3, #6
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	bf08      	it	eq
 8004e54:	1aad      	subeq	r5, r5, r2
 8004e56:	68a3      	ldr	r3, [r4, #8]
 8004e58:	6922      	ldr	r2, [r4, #16]
 8004e5a:	bf0c      	ite	eq
 8004e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e60:	2500      	movne	r5, #0
 8004e62:	4293      	cmp	r3, r2
 8004e64:	bfc4      	itt	gt
 8004e66:	1a9b      	subgt	r3, r3, r2
 8004e68:	18ed      	addgt	r5, r5, r3
 8004e6a:	2600      	movs	r6, #0
 8004e6c:	341a      	adds	r4, #26
 8004e6e:	42b5      	cmp	r5, r6
 8004e70:	d11a      	bne.n	8004ea8 <_printf_common+0xc8>
 8004e72:	2000      	movs	r0, #0
 8004e74:	e008      	b.n	8004e88 <_printf_common+0xa8>
 8004e76:	2301      	movs	r3, #1
 8004e78:	4652      	mov	r2, sl
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	47c0      	blx	r8
 8004e80:	3001      	adds	r0, #1
 8004e82:	d103      	bne.n	8004e8c <_printf_common+0xac>
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
 8004e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8c:	3501      	adds	r5, #1
 8004e8e:	e7c6      	b.n	8004e1e <_printf_common+0x3e>
 8004e90:	18e1      	adds	r1, r4, r3
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	2030      	movs	r0, #48	; 0x30
 8004e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e9a:	4422      	add	r2, r4
 8004e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ea4:	3302      	adds	r3, #2
 8004ea6:	e7c7      	b.n	8004e38 <_printf_common+0x58>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	4622      	mov	r2, r4
 8004eac:	4649      	mov	r1, r9
 8004eae:	4638      	mov	r0, r7
 8004eb0:	47c0      	blx	r8
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d0e6      	beq.n	8004e84 <_printf_common+0xa4>
 8004eb6:	3601      	adds	r6, #1
 8004eb8:	e7d9      	b.n	8004e6e <_printf_common+0x8e>
	...

08004ebc <_printf_i>:
 8004ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	4691      	mov	r9, r2
 8004ec4:	7e27      	ldrb	r7, [r4, #24]
 8004ec6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ec8:	2f78      	cmp	r7, #120	; 0x78
 8004eca:	4680      	mov	r8, r0
 8004ecc:	469a      	mov	sl, r3
 8004ece:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ed2:	d807      	bhi.n	8004ee4 <_printf_i+0x28>
 8004ed4:	2f62      	cmp	r7, #98	; 0x62
 8004ed6:	d80a      	bhi.n	8004eee <_printf_i+0x32>
 8004ed8:	2f00      	cmp	r7, #0
 8004eda:	f000 80d8 	beq.w	800508e <_printf_i+0x1d2>
 8004ede:	2f58      	cmp	r7, #88	; 0x58
 8004ee0:	f000 80a3 	beq.w	800502a <_printf_i+0x16e>
 8004ee4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004eec:	e03a      	b.n	8004f64 <_printf_i+0xa8>
 8004eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ef2:	2b15      	cmp	r3, #21
 8004ef4:	d8f6      	bhi.n	8004ee4 <_printf_i+0x28>
 8004ef6:	a001      	add	r0, pc, #4	; (adr r0, 8004efc <_printf_i+0x40>)
 8004ef8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004efc:	08004f55 	.word	0x08004f55
 8004f00:	08004f69 	.word	0x08004f69
 8004f04:	08004ee5 	.word	0x08004ee5
 8004f08:	08004ee5 	.word	0x08004ee5
 8004f0c:	08004ee5 	.word	0x08004ee5
 8004f10:	08004ee5 	.word	0x08004ee5
 8004f14:	08004f69 	.word	0x08004f69
 8004f18:	08004ee5 	.word	0x08004ee5
 8004f1c:	08004ee5 	.word	0x08004ee5
 8004f20:	08004ee5 	.word	0x08004ee5
 8004f24:	08004ee5 	.word	0x08004ee5
 8004f28:	08005075 	.word	0x08005075
 8004f2c:	08004f99 	.word	0x08004f99
 8004f30:	08005057 	.word	0x08005057
 8004f34:	08004ee5 	.word	0x08004ee5
 8004f38:	08004ee5 	.word	0x08004ee5
 8004f3c:	08005097 	.word	0x08005097
 8004f40:	08004ee5 	.word	0x08004ee5
 8004f44:	08004f99 	.word	0x08004f99
 8004f48:	08004ee5 	.word	0x08004ee5
 8004f4c:	08004ee5 	.word	0x08004ee5
 8004f50:	0800505f 	.word	0x0800505f
 8004f54:	680b      	ldr	r3, [r1, #0]
 8004f56:	1d1a      	adds	r2, r3, #4
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	600a      	str	r2, [r1, #0]
 8004f5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f64:	2301      	movs	r3, #1
 8004f66:	e0a3      	b.n	80050b0 <_printf_i+0x1f4>
 8004f68:	6825      	ldr	r5, [r4, #0]
 8004f6a:	6808      	ldr	r0, [r1, #0]
 8004f6c:	062e      	lsls	r6, r5, #24
 8004f6e:	f100 0304 	add.w	r3, r0, #4
 8004f72:	d50a      	bpl.n	8004f8a <_printf_i+0xce>
 8004f74:	6805      	ldr	r5, [r0, #0]
 8004f76:	600b      	str	r3, [r1, #0]
 8004f78:	2d00      	cmp	r5, #0
 8004f7a:	da03      	bge.n	8004f84 <_printf_i+0xc8>
 8004f7c:	232d      	movs	r3, #45	; 0x2d
 8004f7e:	426d      	negs	r5, r5
 8004f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f84:	485e      	ldr	r0, [pc, #376]	; (8005100 <_printf_i+0x244>)
 8004f86:	230a      	movs	r3, #10
 8004f88:	e019      	b.n	8004fbe <_printf_i+0x102>
 8004f8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f8e:	6805      	ldr	r5, [r0, #0]
 8004f90:	600b      	str	r3, [r1, #0]
 8004f92:	bf18      	it	ne
 8004f94:	b22d      	sxthne	r5, r5
 8004f96:	e7ef      	b.n	8004f78 <_printf_i+0xbc>
 8004f98:	680b      	ldr	r3, [r1, #0]
 8004f9a:	6825      	ldr	r5, [r4, #0]
 8004f9c:	1d18      	adds	r0, r3, #4
 8004f9e:	6008      	str	r0, [r1, #0]
 8004fa0:	0628      	lsls	r0, r5, #24
 8004fa2:	d501      	bpl.n	8004fa8 <_printf_i+0xec>
 8004fa4:	681d      	ldr	r5, [r3, #0]
 8004fa6:	e002      	b.n	8004fae <_printf_i+0xf2>
 8004fa8:	0669      	lsls	r1, r5, #25
 8004faa:	d5fb      	bpl.n	8004fa4 <_printf_i+0xe8>
 8004fac:	881d      	ldrh	r5, [r3, #0]
 8004fae:	4854      	ldr	r0, [pc, #336]	; (8005100 <_printf_i+0x244>)
 8004fb0:	2f6f      	cmp	r7, #111	; 0x6f
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2308      	moveq	r3, #8
 8004fb6:	230a      	movne	r3, #10
 8004fb8:	2100      	movs	r1, #0
 8004fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fbe:	6866      	ldr	r6, [r4, #4]
 8004fc0:	60a6      	str	r6, [r4, #8]
 8004fc2:	2e00      	cmp	r6, #0
 8004fc4:	bfa2      	ittt	ge
 8004fc6:	6821      	ldrge	r1, [r4, #0]
 8004fc8:	f021 0104 	bicge.w	r1, r1, #4
 8004fcc:	6021      	strge	r1, [r4, #0]
 8004fce:	b90d      	cbnz	r5, 8004fd4 <_printf_i+0x118>
 8004fd0:	2e00      	cmp	r6, #0
 8004fd2:	d04d      	beq.n	8005070 <_printf_i+0x1b4>
 8004fd4:	4616      	mov	r6, r2
 8004fd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fda:	fb03 5711 	mls	r7, r3, r1, r5
 8004fde:	5dc7      	ldrb	r7, [r0, r7]
 8004fe0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fe4:	462f      	mov	r7, r5
 8004fe6:	42bb      	cmp	r3, r7
 8004fe8:	460d      	mov	r5, r1
 8004fea:	d9f4      	bls.n	8004fd6 <_printf_i+0x11a>
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d10b      	bne.n	8005008 <_printf_i+0x14c>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	07df      	lsls	r7, r3, #31
 8004ff4:	d508      	bpl.n	8005008 <_printf_i+0x14c>
 8004ff6:	6923      	ldr	r3, [r4, #16]
 8004ff8:	6861      	ldr	r1, [r4, #4]
 8004ffa:	4299      	cmp	r1, r3
 8004ffc:	bfde      	ittt	le
 8004ffe:	2330      	movle	r3, #48	; 0x30
 8005000:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005004:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005008:	1b92      	subs	r2, r2, r6
 800500a:	6122      	str	r2, [r4, #16]
 800500c:	f8cd a000 	str.w	sl, [sp]
 8005010:	464b      	mov	r3, r9
 8005012:	aa03      	add	r2, sp, #12
 8005014:	4621      	mov	r1, r4
 8005016:	4640      	mov	r0, r8
 8005018:	f7ff fee2 	bl	8004de0 <_printf_common>
 800501c:	3001      	adds	r0, #1
 800501e:	d14c      	bne.n	80050ba <_printf_i+0x1fe>
 8005020:	f04f 30ff 	mov.w	r0, #4294967295
 8005024:	b004      	add	sp, #16
 8005026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502a:	4835      	ldr	r0, [pc, #212]	; (8005100 <_printf_i+0x244>)
 800502c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	680e      	ldr	r6, [r1, #0]
 8005034:	061f      	lsls	r7, r3, #24
 8005036:	f856 5b04 	ldr.w	r5, [r6], #4
 800503a:	600e      	str	r6, [r1, #0]
 800503c:	d514      	bpl.n	8005068 <_printf_i+0x1ac>
 800503e:	07d9      	lsls	r1, r3, #31
 8005040:	bf44      	itt	mi
 8005042:	f043 0320 	orrmi.w	r3, r3, #32
 8005046:	6023      	strmi	r3, [r4, #0]
 8005048:	b91d      	cbnz	r5, 8005052 <_printf_i+0x196>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	f023 0320 	bic.w	r3, r3, #32
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	2310      	movs	r3, #16
 8005054:	e7b0      	b.n	8004fb8 <_printf_i+0xfc>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	f043 0320 	orr.w	r3, r3, #32
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	2378      	movs	r3, #120	; 0x78
 8005060:	4828      	ldr	r0, [pc, #160]	; (8005104 <_printf_i+0x248>)
 8005062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005066:	e7e3      	b.n	8005030 <_printf_i+0x174>
 8005068:	065e      	lsls	r6, r3, #25
 800506a:	bf48      	it	mi
 800506c:	b2ad      	uxthmi	r5, r5
 800506e:	e7e6      	b.n	800503e <_printf_i+0x182>
 8005070:	4616      	mov	r6, r2
 8005072:	e7bb      	b.n	8004fec <_printf_i+0x130>
 8005074:	680b      	ldr	r3, [r1, #0]
 8005076:	6826      	ldr	r6, [r4, #0]
 8005078:	6960      	ldr	r0, [r4, #20]
 800507a:	1d1d      	adds	r5, r3, #4
 800507c:	600d      	str	r5, [r1, #0]
 800507e:	0635      	lsls	r5, r6, #24
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	d501      	bpl.n	8005088 <_printf_i+0x1cc>
 8005084:	6018      	str	r0, [r3, #0]
 8005086:	e002      	b.n	800508e <_printf_i+0x1d2>
 8005088:	0671      	lsls	r1, r6, #25
 800508a:	d5fb      	bpl.n	8005084 <_printf_i+0x1c8>
 800508c:	8018      	strh	r0, [r3, #0]
 800508e:	2300      	movs	r3, #0
 8005090:	6123      	str	r3, [r4, #16]
 8005092:	4616      	mov	r6, r2
 8005094:	e7ba      	b.n	800500c <_printf_i+0x150>
 8005096:	680b      	ldr	r3, [r1, #0]
 8005098:	1d1a      	adds	r2, r3, #4
 800509a:	600a      	str	r2, [r1, #0]
 800509c:	681e      	ldr	r6, [r3, #0]
 800509e:	6862      	ldr	r2, [r4, #4]
 80050a0:	2100      	movs	r1, #0
 80050a2:	4630      	mov	r0, r6
 80050a4:	f7fb f8bc 	bl	8000220 <memchr>
 80050a8:	b108      	cbz	r0, 80050ae <_printf_i+0x1f2>
 80050aa:	1b80      	subs	r0, r0, r6
 80050ac:	6060      	str	r0, [r4, #4]
 80050ae:	6863      	ldr	r3, [r4, #4]
 80050b0:	6123      	str	r3, [r4, #16]
 80050b2:	2300      	movs	r3, #0
 80050b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b8:	e7a8      	b.n	800500c <_printf_i+0x150>
 80050ba:	6923      	ldr	r3, [r4, #16]
 80050bc:	4632      	mov	r2, r6
 80050be:	4649      	mov	r1, r9
 80050c0:	4640      	mov	r0, r8
 80050c2:	47d0      	blx	sl
 80050c4:	3001      	adds	r0, #1
 80050c6:	d0ab      	beq.n	8005020 <_printf_i+0x164>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	079b      	lsls	r3, r3, #30
 80050cc:	d413      	bmi.n	80050f6 <_printf_i+0x23a>
 80050ce:	68e0      	ldr	r0, [r4, #12]
 80050d0:	9b03      	ldr	r3, [sp, #12]
 80050d2:	4298      	cmp	r0, r3
 80050d4:	bfb8      	it	lt
 80050d6:	4618      	movlt	r0, r3
 80050d8:	e7a4      	b.n	8005024 <_printf_i+0x168>
 80050da:	2301      	movs	r3, #1
 80050dc:	4632      	mov	r2, r6
 80050de:	4649      	mov	r1, r9
 80050e0:	4640      	mov	r0, r8
 80050e2:	47d0      	blx	sl
 80050e4:	3001      	adds	r0, #1
 80050e6:	d09b      	beq.n	8005020 <_printf_i+0x164>
 80050e8:	3501      	adds	r5, #1
 80050ea:	68e3      	ldr	r3, [r4, #12]
 80050ec:	9903      	ldr	r1, [sp, #12]
 80050ee:	1a5b      	subs	r3, r3, r1
 80050f0:	42ab      	cmp	r3, r5
 80050f2:	dcf2      	bgt.n	80050da <_printf_i+0x21e>
 80050f4:	e7eb      	b.n	80050ce <_printf_i+0x212>
 80050f6:	2500      	movs	r5, #0
 80050f8:	f104 0619 	add.w	r6, r4, #25
 80050fc:	e7f5      	b.n	80050ea <_printf_i+0x22e>
 80050fe:	bf00      	nop
 8005100:	080053cd 	.word	0x080053cd
 8005104:	080053de 	.word	0x080053de

08005108 <memmove>:
 8005108:	4288      	cmp	r0, r1
 800510a:	b510      	push	{r4, lr}
 800510c:	eb01 0402 	add.w	r4, r1, r2
 8005110:	d902      	bls.n	8005118 <memmove+0x10>
 8005112:	4284      	cmp	r4, r0
 8005114:	4623      	mov	r3, r4
 8005116:	d807      	bhi.n	8005128 <memmove+0x20>
 8005118:	1e43      	subs	r3, r0, #1
 800511a:	42a1      	cmp	r1, r4
 800511c:	d008      	beq.n	8005130 <memmove+0x28>
 800511e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005122:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005126:	e7f8      	b.n	800511a <memmove+0x12>
 8005128:	4402      	add	r2, r0
 800512a:	4601      	mov	r1, r0
 800512c:	428a      	cmp	r2, r1
 800512e:	d100      	bne.n	8005132 <memmove+0x2a>
 8005130:	bd10      	pop	{r4, pc}
 8005132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800513a:	e7f7      	b.n	800512c <memmove+0x24>

0800513c <_free_r>:
 800513c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800513e:	2900      	cmp	r1, #0
 8005140:	d048      	beq.n	80051d4 <_free_r+0x98>
 8005142:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005146:	9001      	str	r0, [sp, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f1a1 0404 	sub.w	r4, r1, #4
 800514e:	bfb8      	it	lt
 8005150:	18e4      	addlt	r4, r4, r3
 8005152:	f000 f8d3 	bl	80052fc <__malloc_lock>
 8005156:	4a20      	ldr	r2, [pc, #128]	; (80051d8 <_free_r+0x9c>)
 8005158:	9801      	ldr	r0, [sp, #4]
 800515a:	6813      	ldr	r3, [r2, #0]
 800515c:	4615      	mov	r5, r2
 800515e:	b933      	cbnz	r3, 800516e <_free_r+0x32>
 8005160:	6063      	str	r3, [r4, #4]
 8005162:	6014      	str	r4, [r2, #0]
 8005164:	b003      	add	sp, #12
 8005166:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800516a:	f000 b8cd 	b.w	8005308 <__malloc_unlock>
 800516e:	42a3      	cmp	r3, r4
 8005170:	d90b      	bls.n	800518a <_free_r+0x4e>
 8005172:	6821      	ldr	r1, [r4, #0]
 8005174:	1862      	adds	r2, r4, r1
 8005176:	4293      	cmp	r3, r2
 8005178:	bf04      	itt	eq
 800517a:	681a      	ldreq	r2, [r3, #0]
 800517c:	685b      	ldreq	r3, [r3, #4]
 800517e:	6063      	str	r3, [r4, #4]
 8005180:	bf04      	itt	eq
 8005182:	1852      	addeq	r2, r2, r1
 8005184:	6022      	streq	r2, [r4, #0]
 8005186:	602c      	str	r4, [r5, #0]
 8005188:	e7ec      	b.n	8005164 <_free_r+0x28>
 800518a:	461a      	mov	r2, r3
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	b10b      	cbz	r3, 8005194 <_free_r+0x58>
 8005190:	42a3      	cmp	r3, r4
 8005192:	d9fa      	bls.n	800518a <_free_r+0x4e>
 8005194:	6811      	ldr	r1, [r2, #0]
 8005196:	1855      	adds	r5, r2, r1
 8005198:	42a5      	cmp	r5, r4
 800519a:	d10b      	bne.n	80051b4 <_free_r+0x78>
 800519c:	6824      	ldr	r4, [r4, #0]
 800519e:	4421      	add	r1, r4
 80051a0:	1854      	adds	r4, r2, r1
 80051a2:	42a3      	cmp	r3, r4
 80051a4:	6011      	str	r1, [r2, #0]
 80051a6:	d1dd      	bne.n	8005164 <_free_r+0x28>
 80051a8:	681c      	ldr	r4, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	6053      	str	r3, [r2, #4]
 80051ae:	4421      	add	r1, r4
 80051b0:	6011      	str	r1, [r2, #0]
 80051b2:	e7d7      	b.n	8005164 <_free_r+0x28>
 80051b4:	d902      	bls.n	80051bc <_free_r+0x80>
 80051b6:	230c      	movs	r3, #12
 80051b8:	6003      	str	r3, [r0, #0]
 80051ba:	e7d3      	b.n	8005164 <_free_r+0x28>
 80051bc:	6825      	ldr	r5, [r4, #0]
 80051be:	1961      	adds	r1, r4, r5
 80051c0:	428b      	cmp	r3, r1
 80051c2:	bf04      	itt	eq
 80051c4:	6819      	ldreq	r1, [r3, #0]
 80051c6:	685b      	ldreq	r3, [r3, #4]
 80051c8:	6063      	str	r3, [r4, #4]
 80051ca:	bf04      	itt	eq
 80051cc:	1949      	addeq	r1, r1, r5
 80051ce:	6021      	streq	r1, [r4, #0]
 80051d0:	6054      	str	r4, [r2, #4]
 80051d2:	e7c7      	b.n	8005164 <_free_r+0x28>
 80051d4:	b003      	add	sp, #12
 80051d6:	bd30      	pop	{r4, r5, pc}
 80051d8:	20012e00 	.word	0x20012e00

080051dc <_malloc_r>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	1ccd      	adds	r5, r1, #3
 80051e0:	f025 0503 	bic.w	r5, r5, #3
 80051e4:	3508      	adds	r5, #8
 80051e6:	2d0c      	cmp	r5, #12
 80051e8:	bf38      	it	cc
 80051ea:	250c      	movcc	r5, #12
 80051ec:	2d00      	cmp	r5, #0
 80051ee:	4606      	mov	r6, r0
 80051f0:	db01      	blt.n	80051f6 <_malloc_r+0x1a>
 80051f2:	42a9      	cmp	r1, r5
 80051f4:	d903      	bls.n	80051fe <_malloc_r+0x22>
 80051f6:	230c      	movs	r3, #12
 80051f8:	6033      	str	r3, [r6, #0]
 80051fa:	2000      	movs	r0, #0
 80051fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051fe:	f000 f87d 	bl	80052fc <__malloc_lock>
 8005202:	4921      	ldr	r1, [pc, #132]	; (8005288 <_malloc_r+0xac>)
 8005204:	680a      	ldr	r2, [r1, #0]
 8005206:	4614      	mov	r4, r2
 8005208:	b99c      	cbnz	r4, 8005232 <_malloc_r+0x56>
 800520a:	4f20      	ldr	r7, [pc, #128]	; (800528c <_malloc_r+0xb0>)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	b923      	cbnz	r3, 800521a <_malloc_r+0x3e>
 8005210:	4621      	mov	r1, r4
 8005212:	4630      	mov	r0, r6
 8005214:	f000 f862 	bl	80052dc <_sbrk_r>
 8005218:	6038      	str	r0, [r7, #0]
 800521a:	4629      	mov	r1, r5
 800521c:	4630      	mov	r0, r6
 800521e:	f000 f85d 	bl	80052dc <_sbrk_r>
 8005222:	1c43      	adds	r3, r0, #1
 8005224:	d123      	bne.n	800526e <_malloc_r+0x92>
 8005226:	230c      	movs	r3, #12
 8005228:	6033      	str	r3, [r6, #0]
 800522a:	4630      	mov	r0, r6
 800522c:	f000 f86c 	bl	8005308 <__malloc_unlock>
 8005230:	e7e3      	b.n	80051fa <_malloc_r+0x1e>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	1b5b      	subs	r3, r3, r5
 8005236:	d417      	bmi.n	8005268 <_malloc_r+0x8c>
 8005238:	2b0b      	cmp	r3, #11
 800523a:	d903      	bls.n	8005244 <_malloc_r+0x68>
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	441c      	add	r4, r3
 8005240:	6025      	str	r5, [r4, #0]
 8005242:	e004      	b.n	800524e <_malloc_r+0x72>
 8005244:	6863      	ldr	r3, [r4, #4]
 8005246:	42a2      	cmp	r2, r4
 8005248:	bf0c      	ite	eq
 800524a:	600b      	streq	r3, [r1, #0]
 800524c:	6053      	strne	r3, [r2, #4]
 800524e:	4630      	mov	r0, r6
 8005250:	f000 f85a 	bl	8005308 <__malloc_unlock>
 8005254:	f104 000b 	add.w	r0, r4, #11
 8005258:	1d23      	adds	r3, r4, #4
 800525a:	f020 0007 	bic.w	r0, r0, #7
 800525e:	1ac2      	subs	r2, r0, r3
 8005260:	d0cc      	beq.n	80051fc <_malloc_r+0x20>
 8005262:	1a1b      	subs	r3, r3, r0
 8005264:	50a3      	str	r3, [r4, r2]
 8005266:	e7c9      	b.n	80051fc <_malloc_r+0x20>
 8005268:	4622      	mov	r2, r4
 800526a:	6864      	ldr	r4, [r4, #4]
 800526c:	e7cc      	b.n	8005208 <_malloc_r+0x2c>
 800526e:	1cc4      	adds	r4, r0, #3
 8005270:	f024 0403 	bic.w	r4, r4, #3
 8005274:	42a0      	cmp	r0, r4
 8005276:	d0e3      	beq.n	8005240 <_malloc_r+0x64>
 8005278:	1a21      	subs	r1, r4, r0
 800527a:	4630      	mov	r0, r6
 800527c:	f000 f82e 	bl	80052dc <_sbrk_r>
 8005280:	3001      	adds	r0, #1
 8005282:	d1dd      	bne.n	8005240 <_malloc_r+0x64>
 8005284:	e7cf      	b.n	8005226 <_malloc_r+0x4a>
 8005286:	bf00      	nop
 8005288:	20012e00 	.word	0x20012e00
 800528c:	20012e04 	.word	0x20012e04

08005290 <_realloc_r>:
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	4607      	mov	r7, r0
 8005294:	4614      	mov	r4, r2
 8005296:	460e      	mov	r6, r1
 8005298:	b921      	cbnz	r1, 80052a4 <_realloc_r+0x14>
 800529a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800529e:	4611      	mov	r1, r2
 80052a0:	f7ff bf9c 	b.w	80051dc <_malloc_r>
 80052a4:	b922      	cbnz	r2, 80052b0 <_realloc_r+0x20>
 80052a6:	f7ff ff49 	bl	800513c <_free_r>
 80052aa:	4625      	mov	r5, r4
 80052ac:	4628      	mov	r0, r5
 80052ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052b0:	f000 f830 	bl	8005314 <_malloc_usable_size_r>
 80052b4:	42a0      	cmp	r0, r4
 80052b6:	d20f      	bcs.n	80052d8 <_realloc_r+0x48>
 80052b8:	4621      	mov	r1, r4
 80052ba:	4638      	mov	r0, r7
 80052bc:	f7ff ff8e 	bl	80051dc <_malloc_r>
 80052c0:	4605      	mov	r5, r0
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d0f2      	beq.n	80052ac <_realloc_r+0x1c>
 80052c6:	4631      	mov	r1, r6
 80052c8:	4622      	mov	r2, r4
 80052ca:	f7ff fbf7 	bl	8004abc <memcpy>
 80052ce:	4631      	mov	r1, r6
 80052d0:	4638      	mov	r0, r7
 80052d2:	f7ff ff33 	bl	800513c <_free_r>
 80052d6:	e7e9      	b.n	80052ac <_realloc_r+0x1c>
 80052d8:	4635      	mov	r5, r6
 80052da:	e7e7      	b.n	80052ac <_realloc_r+0x1c>

080052dc <_sbrk_r>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	4d06      	ldr	r5, [pc, #24]	; (80052f8 <_sbrk_r+0x1c>)
 80052e0:	2300      	movs	r3, #0
 80052e2:	4604      	mov	r4, r0
 80052e4:	4608      	mov	r0, r1
 80052e6:	602b      	str	r3, [r5, #0]
 80052e8:	f7fb fb54 	bl	8000994 <_sbrk>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d102      	bne.n	80052f6 <_sbrk_r+0x1a>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	b103      	cbz	r3, 80052f6 <_sbrk_r+0x1a>
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	20012ed8 	.word	0x20012ed8

080052fc <__malloc_lock>:
 80052fc:	4801      	ldr	r0, [pc, #4]	; (8005304 <__malloc_lock+0x8>)
 80052fe:	f000 b811 	b.w	8005324 <__retarget_lock_acquire_recursive>
 8005302:	bf00      	nop
 8005304:	20012ee0 	.word	0x20012ee0

08005308 <__malloc_unlock>:
 8005308:	4801      	ldr	r0, [pc, #4]	; (8005310 <__malloc_unlock+0x8>)
 800530a:	f000 b80c 	b.w	8005326 <__retarget_lock_release_recursive>
 800530e:	bf00      	nop
 8005310:	20012ee0 	.word	0x20012ee0

08005314 <_malloc_usable_size_r>:
 8005314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005318:	1f18      	subs	r0, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	bfbc      	itt	lt
 800531e:	580b      	ldrlt	r3, [r1, r0]
 8005320:	18c0      	addlt	r0, r0, r3
 8005322:	4770      	bx	lr

08005324 <__retarget_lock_acquire_recursive>:
 8005324:	4770      	bx	lr

08005326 <__retarget_lock_release_recursive>:
 8005326:	4770      	bx	lr

08005328 <_init>:
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	bf00      	nop
 800532c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532e:	bc08      	pop	{r3}
 8005330:	469e      	mov	lr, r3
 8005332:	4770      	bx	lr

08005334 <_fini>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	bf00      	nop
 8005338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533a:	bc08      	pop	{r3}
 800533c:	469e      	mov	lr, r3
 800533e:	4770      	bx	lr
